#!/usr/bin/env perl

#==============================================================================
# datefmt
# File ID: cbb80cc6-a45e-11ea-944f-4f45262dc9b5
#
# Convert number of seconds to date format.
#
# Character set: UTF-8
# ©opyleft 2020– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of file for 
# legal stuff.
#==============================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

	'help' => 0,
	'quiet' => 0,
	'verbose' => 0,
	'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.2.0';

Getopt::Long::Configure('bundling');
GetOptions(

	'help|h' => \$Opt{'help'},
	'quiet|q+' => \$Opt{'quiet'},
	'verbose|v+' => \$Opt{'verbose'},
	'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
	print_version();
	exit(0);
}

exit(main());

sub main {
	my $Retval = 0;

	if (defined($ARGV[0])) {
		my $i = 0;
		while (defined($ARGV[$i])) {
			print(parse_line($ARGV[$i]) . "\n");
			$i++;
		}
	} else {
		while (my $line = <STDIN>) {
			print(parse_line($line));
		}
	}
	return $Retval;
}

sub parse_line {
	my $l = shift;
	$l =~ s{
		^
		(\s*)
		(-?)
		(\d+)
		(.*?)
		$
	}{
		sprintf("%s%s%s%s", $1, $2, sec2date($3), $4)
	}ex;
	return $l;
}

sub sec2date {
	my $s = shift;
	($s =~ /^\d+$/) || return $s;
	my $ss = $s;
	my %secc = (
		'min' => 60,
		'hour' => 3600,
		'day' => 86400
	);
	$secc{'year'} = $secc{'day'} * 365.2425;
	my $retval = "";
	my $years = int($ss / $secc{'year'});
	$ss -= $years * $secc{'year'};
	my $days = int(($ss % $secc{'year'}) / $secc{'day'});
	my $hours = int(($ss % $secc{'day'}) / $secc{'hour'});
	my $mins = int(($ss % $secc{'hour'}) / $secc{'min'});
	my $secs = $ss % $secc{'min'};

	return sprintf("%us", $secs) if ($s < $secc{'min'});
	return sprintf("%um:%02us", $mins, $secs) if ($s < $secc{'hour'});
	return sprintf("%uh:%02um:%02us",
	               $hours, $mins, $secs) if ($s < $secc{'day'});
	return sprintf("%ud:%02uh:%02um:%02us",
	               $days, $hours, $mins, $secs) if ($s < $secc{'year'});
	return sprintf("%uy:%ud:%02uh:%02um:%02us",
	               $years, $days, $hours, $mins, $secs);
}

sub print_version {
	# Print program version
	print("$progname $VERSION\n");
	return;
}

sub usage {
	# Send the help message to stdout
	my $Retval = shift;

	if ($Opt{'verbose'}) {
		print("\n");
		print_version();
	}
	print(<<"END");

Convert number of seconds to date format. If no arguments are specified, 
read from stdin.

Usage: $progname [options] [seconds [...]]

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
	exit($Retval);
}

sub msg {
	# Print a status message to stderr based on verbosity level
	my ($verbose_level, $Txt) = @_;

	if ($Opt{'verbose'} >= $verbose_level) {
		print(STDERR "$progname: $Txt\n");
	}
	return;
}

__END__

# This program is free software; you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation; either version 2 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with 
# this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set ts=8 sw=8 sts=8 noet fo+=w tw=79 fenc=UTF-8 :
