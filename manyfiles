#!/usr/bin/env perl

#=======================================================================
# manyfiles
# File ID: 7046da86-f743-11dd-8d25-000475e441b9
# Creates loads of files in the current directory. Used for 
# stresstesting file systems and stuff.
#
# Character set: UTF-8
# ©opyleft 2004– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;
use Time::HiRes qw{ gettimeofday };

$| = 1;

our $Debug = 0;

our %Opt = (

    'char' => "",
    'count' => 0,
    'debug' => 0,
    'extension' => "",
    'help' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

Getopt::Long::Configure("bundling");
GetOptions(

    "char=s" => \$Opt{'char'},
    "count|c=i" => \$Opt{'count'},
    "debug" => \$Opt{'debug'},
    "extension|e=s" => \$Opt{'extension'},
    "help|h" => \$Opt{'help'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

$Opt{'count'} && $Opt{'count'}++;

my $Retval = 0;

if ($#ARGV < 0) {
    die("$progname: No directory specified. Use \"$progname -h\" for help.\n");
}

my ($char_start, $char_end);

if (length($Opt{'char'})) {
    my $Str = $Opt{'char'};
    if ($Str =~ /^(\d+)-(\d+)$/) {
        ($char_start, $char_end) = ($1, $2);
        if ($char_start > 255 || $char_start > 255) {
            die("$progname: Invalid character value in --char value, " .
                "has to be in range 0-255.\n");
        }
    }
}

for my $Curr (@ARGV) {
    D("\$Curr = '$Curr'");
    $Retval ||= fill_directory($Curr);
    D("After fill_directory(i'$Curr')");
}

D("exit($Retval)");
exit($Retval);

sub fill_directory {
    # {{{
    my $Dir = shift;
    my $start_time = gettimeofday;
    my $total_created = 0;
    my $a;

    D("fill_directory(\"$Dir\")");
    if (!-d "$Dir/.") {
        if (!mkdir($Dir)) {
            warn("$progname: $Dir: Cannot create directory: $!\n");
            return(1);
        }
    }
    if ($Opt{'char'}) {
        if (defined($char_start) && defined($char_end)) {
            D("char_start = '$char_start', char_end = '$char_end'");
            for ($a = $char_start; $a <= $char_end; $a++) {
                my $hex_val = sprintf("%02x", $a);
                my $File = sprintf("%s/%s_%c%s", $Dir, ${hex_val}, $a, $Opt{'extension'});
                D("a = '$a', File = '$File'");
                unless (open(FP, ">$File")) {
                    warn("$progname: $File: Cannot create file: $!\n");
                } else {
                    $total_created++;
                }
            }
        }
    } else {
        for ($a = 1; $a != $Opt{'count'}; $a++) {
            my $File = "$Dir/$a$Opt{'extension'}";
            unless (open(FP, ">$File")) {
                warn("$0: $File: Cannot create file: $!");
            } else {
                $total_created++;
            }
        }
    }

    my $end_time = gettimeofday;
    my $total_time = $end_time - $start_time;
    $a--;

    printf("$Dir: Created %u file%s in %.6f second%s%s.\n",
        $total_created,
        $total_created == 1 ? "" : "s",
        $total_time,
        $total_time == 1 ? "" : "s",
        $total_time
            ? sprintf(", %.2f files/second on average",
                $total_created / $total_time)
            : ""
    );
    return(0);
    # }}}
} # fill_directory()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] directory [directories [...]]

Creates loads of empty files in the specified directories. Used for file 
system profiling and other interesting stuff.

Options:

  -c, --count x
    Stop after x files are created.
  --char start-end
    Create files with filenames containing bytes in the area specified 
    (0-255).
  -e, --extension x
    Use x as extension of the created files.
  -h, --help
    Show this help.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
