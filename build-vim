#!/bin/bash

#=======================================================================
# build-vim
# File ID: 6d23a156-5d3e-11df-9a9a-90e6ba3022ac
#
# Compile and install Vim
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=build-vim
VERSION=0.1.0
rcfile="$HOME/.${progname}rc"

if test "$1" = "--version"; then
    echo $progname $VERSION
    exit 0
fi

if test "$1" = "-h" -o "$1" = "--help"; then
    cat <<END

Compile and install Vim

Usage: $progname [options]

Options:

  -f
    Remove lockdir before installing The Holy Editor.
  -h, --help
    Show this help.
  -n, --dry-run
    Don't do anything, output commands that would be executed instead.
  --version
    Print version information.

If "$rcfile" exists, execute it before the compilation starts. Use it to 
configure the build for each computer. For example:

  prefix=~/local

will place everything below the ~/local directory.

These are the main variables to control the build:

  - srcdir
    Directory where the cloned source from 
    https://github.com/vim/vim.git is stored.
    Default value: \$HOME/src/other/vim
  - prefix
    Top directory of the installed files.
    Default value: /usr/local
  - prgdir
    Directory where the symlink of the current version is stored. Points 
    to \$destdir.
    Default value: \$prefix/prg
  - destdir
    Directory where the compiled files are installed.
    Default value: \$prefix/varprg/vim-\$vimdesc
  - vimdesc
    Version number, you shouldn't need to touch this.
    Default value is the output of "git describe --long --tags".
  - user
    Owner of the \$prefix directory.
    Default value is the output of "whoami". "make install" is not 
    executed as root to be sure that no files are installed outside 
    \$prefix.
  - group
    Group of the \$prefix directory.
    Default value: Same as \$user.

END
    exit 0
fi

exec_rcfile() {
    test -e "$rcfile" && . $rcfile
}

msg() {
    echo >&2
    echo $progname: $* >&2
    return
}

unset sim
test "$1" = "-n" -o "$1" = "--dry-run" && { sim=echo; shift; }

lockdir="$HOME/.$progname.LOCK"
if test "$1" = "-f"; then
    rmdir -v "$lockdir"
    shift
fi
mkdir "$lockdir" || {
    echo "build-vim: $lockdir: Lockdir exists, aborting" >&2
    exit 1
}

srcdir="$HOME/src/other/vim"
exec_rcfile
$sim cd "$srcdir" || {
    rmdir "$lockdir"
    exit 1
}

user=$(whoami)
group=$user
prefix="/usr/local"
exec_rcfile
prgdir="$prefix/prg"
vimdesc="$(git describe --long --tags)"
destdir="$prefix/varprg/vim-$vimdesc"
exec_rcfile

test -e "$destdir" && {
    echo $progname: $destdir already exists >&2
    rmdir "$lockdir"
    exit 1
}

msg mkdir and chown $destdir &&
$sim sudo mkdir -p "$destdir" &&
$sim sudo chown $user.$group "$destdir" &&

$sim cd "$srcdir" &&
$sim git wait-until-clean &&

msg git clean in $srcdir/ &&
$sim git clean -fxd &&

msg ./configure &&
$sim ./configure --prefix="$destdir" \
  --with-features=huge --with-x --enable-multibyte &&
msg make &&
$sim make &&

msg make test &&
$sim make test &&

msg make install &&
$sim make install &&

$sim cd "$prgdir" &&
msg Update the vim symlink in $prgdir/ &&
$sim sudo ln -fnsv "../varprg/vim-$vimdesc" vim &&

$sim cd "$prefix/share/man/man1" &&
msg Create manpage symlinks in $prefix/share/man/man1/ &&
$sim sudo ln -fnsv ../../../prg/vim/share/man/man1/* . &&

$sim cd "$prefix/bin" &&
msg Create symlinks in $prefix/bin/ &&
$sim ln -fnsv ../prg/vim/bin/* . &&

if test -d "$prefix/.git/."; then
    msg Commit the symlink &&
    commitmsg=$(echo $progname installed vim-$vimdesc on $(hostname); echo; $sim suuid -t commit,$progname) &&
    $sim cd "$prgdir" &&
    $sim sudo git add vim &&
    echo Commit message: &&
    echo $commitmsg &&
    $sim sudo git commit -m "$commitmsg"
fi &&

{
    msg Successfully installed vim-$vimdesc
    retval=0
} || {
    msg Something went bananas
    retval=1
}

rmdir "$lockdir"
exit $retval

# vim: set ts=4 sw=4 sts=4 et fenc=utf8 :
