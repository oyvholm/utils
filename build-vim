#!/bin/bash

#=======================================================================
# build-vim
# File ID: 6d23a156-5d3e-11df-9a9a-90e6ba3022ac
#
# Compile and install Vim
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=build-vim
VERSION=0.2.1
rcfile="$HOME/.${progname}rc"
configure_opts="--with-features=huge --with-x --enable-multibyte"
cloneurl=https://github.com/vim/vim.git
branch=master
remotename=origin

ARGS="$(getopt -o "fhnquvy" \
    -l "help,dry-run,quiet,update,verbose,yes,version" \
    -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_f=0
opt_help=0
opt_dry_run=0
opt_quiet=0
opt_update=0
opt_verbose=0
opt_yes=0
while :; do
    case "$1" in
        (-f) opt_f=1; shift ;;
        (-h|--help) opt_help=1; shift ;;
        (-n|--dry-run) opt_dry_run=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-u|--update) opt_update=1; shift ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (-y|--yes) opt_yes=1; shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Compile and install Vim

Usage: $progname [options]

Options:

  -f
    Remove lockdir before installing The Holy Editor.
  -h, --help
    Show this help.
  -n, --dry-run
    Don't do anything, output commands that would be executed instead.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -u, --update
    Fetch new commits and update the source code before starting the 
    build.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  -y
    Answer 'y' to all questions, perform an automated build. May cause 
    the script to hang if sudo is used and it's timed out.
  --version
    Print version information.

If "$rcfile" exists, execute it before the compilation starts.
Use it to configure the build for each computer. For example:

  prefix=~/local
  sudo=

will place everything below the ~/local directory and not use sudo.

These are the main variables to control the build:

  - cloneurl
    Git URL to clone the source from if the \$srcdir directory
    doesn't exist.
    Default value: $cloneurl
  - remotename
    Local name of cloned remote.
    Default value: $remotename
  - branch
    Check out this branch after cloning the source from \$cloneurl.
    Default value: $branch
  - srcdir
    Directory where the cloned source from \$cloneurl is stored.
    Default value: \$HOME/src/other/vim
  - prefix
    Top directory of the installed files.
    Default value: /usr/local
  - prgdir
    Directory where the symlink of the current version is stored. Points 
    to \$destdir.
    Default value: \$prefix/prg
  - destdir
    Directory where the compiled files are installed.
    Default value: \$prefix/varprg/vim-\$desc
  - configure_opts
    Options passed to "./configure".
    Default value: $configure_opts
  - desc
    Version number, you shouldn't need to touch this.
    Default value is the output of "git describe --long --tags".
  - user
    Owner of the \$prefix directory.
    Default value is the output of "whoami". "make install" is not 
    executed as root to be sure that no files are installed outside 
    \$prefix.
  - group
    Group of the \$prefix directory.
    Default value: Same as \$user.
  - sudo
    Set to "1" or "true" if sudo(8) should be used. Any other value 
    disables sudo.
    Default value: true

END
    exit 0
fi

exec_rcfile() {
    test -e "$rcfile" && . "$rcfile"
}

msg() {
    unset no_lf
    if test "$1" = "-n"; then
        # If -n is first argument, don't terminate with \n
        local no_lf="-n"
        shift
    fi
    if test "$1" = "-s"; then
        # If -s is specified, skip initial \n
        shift
    else
        echo >&2
    fi
    echo $no_lf "$progname: $*" >&2
    return
}

lockdir="$HOME/.$progname.LOCK"

if test "$opt_f" = "1"; then
    rmdir -v "$lockdir"
fi

unset sim
if test "$opt_dry_run" = "1"; then
    sim=echo
    sim_str=" (Simulated)"
fi

cleanup() {
    rmdir "$lockdir" || msg -s $lockdir: Cannot remove lockdir
}

continue_if_y() {
    if test "$opt_yes" = "1"; then
        echo y >&2
    else
        unset choice_y
        until test "$choice_y" = "y"; do
            read choice_y
            test "$choice_y" = "n" && exit 0
            if test "$choice_y" != "y"; then
                msg -n -s "Please press 'y' or 'n': "
            fi
        done
    fi
    return
}

mkdir "$lockdir" || {
    msg -s $lockdir: Lockdir exists, aborting
    exit 1
}

trap cleanup EXIT

srcdir="$HOME/src/other/vim"
exec_rcfile
if test ! -f "$srcdir/Vim.info"; then
    msg -s $srcdir/ doesn\'t exist, clone it &&
    msg -n -s "from $cloneurl (y/n)?$sim_str " &&
    continue_if_y &&
    $sim git clone -o "$remotename" $cloneurl "$srcdir" &&
    cd "$srcdir" &&
    $sim git checkout "$branch" &&
    echo >&2 ||
    exit 1
fi
cd "$srcdir" || {
    if test "$sim" = "echo"; then
        msg $srcdir doesn\'t exist,
        msg -s values of \$desc and \$destdir are not shown correctly.
        msg -s Not a problem, since we\'re only simulating.
        echo >&2
    else
        exit 1
    fi
}

user="$(whoami)"
group="$user"
sudo=true
prefix="/usr/local"
exec_rcfile
prgdir="$prefix/prg"
exec_rcfile
test "$sudo" = "1" -o "$sudo" = "true" && sudo=sudo || unset sudo

if test "$sim" != "echo"; then
    test -z "$(git status --porcelain)" || {
        msg -s $srcdir is not clean
        exit 1
    }
fi

if test "$opt_update" = "1"; then
    $sim git fetch origin
    $sim git merge --ff-only
fi

desc="$(git describe --long --tags)"
destdir="$prefix/varprg/vim-$desc"

test -e "$destdir" && {
    $sim $sudo rmdir "$destdir" || {
        msg -s $destdir already exists
        exit 1
    }
}

cat <<END
Going to compile and install "vim-$desc"$sim_str

cloneurl = "$cloneurl"
remotename = "$remotename"
branch = "$branch"
srcdir = "$srcdir"
prefix = "$prefix"
prgdir = "$prgdir"
destdir = "$destdir"
configure_opts = "$configure_opts"
user = "$user"
group = "$group"
sudo = "$sudo"

END

echo -n If that looks OK, press \'y\' to start the build or \'n\' to abort...
continue_if_y

msg mkdir and chown $destdir &&
$sim $sudo mkdir -p "$destdir" &&
$sim $sudo chown "$user"."$group" "$destdir" &&

msg mkdir -p $prefix/share/man/man1 &&
$sim mkdir -p "$prefix/share/man/man1" &&

msg mkdir -p $prefix/bin &&
$sim mkdir -p "$prefix/bin" &&

$sim cd "$srcdir" &&

msg git clean in $srcdir/ &&
$sim git clean -fxd &&

msg ./configure $configure_opts &&
$sim ./configure --prefix="$destdir" $configure_opts &&
msg make &&
$sim make &&

msg make test &&
$sim make test &&

msg make install &&
$sim make install &&

$sim cd "$prgdir" &&
msg Update the vim symlink in $prgdir/ &&
$sim $sudo ln -fnsv "../varprg/vim-$desc" vim &&

$sim cd "$prefix/share/man/man1" &&
msg Create manpage symlinks in $prefix/share/man/man1/ &&
$sim $sudo ln -fnsv ../../../prg/vim/share/man/man1/* . &&

$sim cd "$prefix/share" &&
msg Create $prefix/share/vim symlink &&
$sim $sudo ln -fnsv ../prg/vim/share/vim . &&

$sim cd "$prefix/bin" &&
msg Create symlinks in $prefix/bin/ &&
$sim ln -fnsv ../prg/vim/bin/* . &&

if test -d "$prefix/.git/."; then
    msg Commit the symlink &&
    commitmsg=$(
        echo $progname installed vim-$desc on $(hostname)
        if suuid --version 2>/dev/null | grep -q "^suuid v"; then
            echo
            $sim suuid -t commit,$progname
        fi || true
    ) &&
    $sim cd "$prgdir" &&
    $sim $sudo git add vim &&
    echo Commit message: &&
    echo $commitmsg &&
    $sim $sudo git commit -m "$commitmsg"
fi &&

{
    msg Successfully installed vim-$desc$sim_str
    retval=0
} || {
    msg Something went bananas
    retval=1
}

exit $retval

# vim: set ts=4 sw=4 sts=4 et fenc=utf8 :
