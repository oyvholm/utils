#!/usr/bin/env bash

#=======================================================================
# ga
# File ID: e89047ce-29d1-11e2-bb6f-00c0a8deee11
#
# Customised frontend to git-annex
#
# Author: Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=ga
VERSION=0.15.1

if test "$1" = "--version"; then
    echo $progname $VERSION
    exit 0
fi

if test "$1" = "-h" -o "$1" = "--help"; then
    cat <<END

Customised frontend to git-annex.

Usage: $progname [options] git-annex_commands_and_options

The following commands (first non-option on the command line) are 
customised:

  copnum
    Like "git annex numcopies", but always return a number. If numcopies 
    is not defined, return 1.
  fsck
    Filter the output through ga-fsck-size, calculates how much space is 
    needed to get enough file copies.
  init
    If annex.uuid isn't already defined, initialise annex.uuid with an 
    UUID v1 (time-based UUID) instead of v4 (random-based). This is done 
    before executing an ordinary "git annex init". If a description is 
    provided on the command line after the "init" command, use that, or 
    set the description to the value of the ga.description Git config 
    variable if it exists. Otherwise use the output from the "ga-pwd" 
    command. The script will abort if annex.uuid is already defined. 
    Also, if any other command than init is executed and annex.uuid 
    doesn't exist, the script aborts. This is to make sure no git-annex 
    setup is done in non-annex repositories.
  max-bytes SIZE COMMAND
    Execute git-annex with a modified annex.diskreserve locally so the 
    local free annex space seems to be SIZE. This can be used to for 
    example move maximum SIZE bytes from another repo to the local one:
      ga max-bytes 1000000 move --from exthd --not --in here
    will move at most 1 megabyte from the exthd remote. Note that 
    because it uses the annex.diskreserve Git config variable as a 
    workaround, it will be affected if the actual disk space changes. It 
    works best when there's no other activity on the local disk going 
    on.
  md
    Shortcut for "metadata".
  sync
    If the Git config variable annex.autocommit is not "false", execute 
    "git wait-until-clean -u" before syncing, i.e., wait until the 
    repository is clean before continuing. This is to avoid any 
    accidental commits.
    Also, update all local synced/* branches by running "git pa -s". If 
    you have a Git-aware command line prompt that shows if the current 
    branch is behind or ahead upstream, it will show when a sync or 
    merge is needed.
  ud
    Shortcut for "update-desc".
  unused
    Filter the output through ga-sumsize, display total number of bytes 
    in unused files.
  update-desc
    Update the git-annex description, use the generic output from 
    ga-pwd. For example, the output for the current directory is
    "`ga-pwd`".
    If the git config key ga.description is defined, that value is used 
    instead. This can be used if some repos have to be called something 
    else than what the ga-pwd value says.

After all this, it disables "git annex pre-commit ." in 
.git/hooks/pre-commit if it's not already disabled. This is to avoid an 
automatic "git annex fix" that automatically fixes broken symlinks 
before commit. It makes it hard to track file renames, as it breaks "git 
log --follow" and friends.

Options:

  -h, --help
    Show this help.
  --version
    Print version information.

END
    exit 0
fi

disk_free() {
    df -B 1 -P . | tail -1 | tr -s ' ' | cut -f 4 -d ' ' | tr -d '\n'
}

if test "$1" = "init"; then
    if test -z "$(git config --get annex.uuid)"; then
        git config annex.uuid $(suuid -wa -t ga_init)
        shift
        if test -n "$1"; then
            git-annex init "$@"
        elif test -n "$(git config --get ga.description)"; then
            git-annex init "$(git config --get ga.description)"
        else
            git-annex init "$(ga-pwd)"
        fi
        exit
    else
        echo $progname: Repository is already initialised for git-annex >&2
        exit 1
    fi
else
    if test -z "$(git config --get annex.uuid)"; then
        echo $progname: annex.uuid is not defined, aborting >&2
        exit 1
    fi
fi

# Check that "git annex pre-commit ." is commented out in 
# .git/hooks/pre-commit, I don't want to let "git commit" run "git annex 
# fix" automatically when I've moved files around. I want to be able to 
# track moves, and it breaks "git log --follow". If it's not disabled, 
# do it automatically.
precommit="$(git rev-parse --show-toplevel)/.git/hooks/pre-commit"
if test -f "$precommit"; then
    grep -q '^git.*annex.*pre-commit' "$precommit" && {
        perl -p -i -e 's/^(git.annex.+pre-commit)/# $1/' "$precommit"
        echo $progname: $precommit: Have disabled git annex pre-commit: >&2
        cat "$precommit" >&2
    }
fi

if test "$1" = "copnum"; then
    if test -n "$(ga numcopies | grep "is not set")"; then
        echo 1
    else
        git annex numcopies
    fi
    exit
fi

if test "$1" = "fsck"; then
    shift
    git-annex fsck "$@" 2>&1 | ga-fsck-size
elif test "$1" = "max-bytes"; then
    maxbytes=$2
    if test -z "$maxbytes"; then
        echo $progname: max-bytes needs an integer argument >&2
        exit 1
    fi
    shift 2
    git-annex "$@" -c annex.diskreserve=$(echo $(disk_free)-$maxbytes | bc)
elif test "$1" = "md"; then
    shift
    git-annex metadata "$@"
elif test "$1" = "sync"; then
    if test "$(git config --get annex.autocommit)" != "false"; then
        git wait-until-clean -u
    fi
    git-annex "$@"
    git pa -s
elif test "$1" = "unused"; then
    shift
    git-annex unused "$@" | ga-sumsize
elif test "$1" = "update-desc" -o "$1" = "ud"; then
    toplevel="$(git rev-parse --show-toplevel)"
    cd "$toplevel" || {
        echo $progname update-desc: $toplevel: Cannot change to directory >&2
        exit 1
    }
    description="$(git config --get ga.description)"
    if test -n "$description"; then
        here="$description"
    else
        here="$(ga-pwd)"
    fi
    repouuid="$(git config --get annex.uuid)"
    if test -z "$repouuid"; then
        echo $progname: annex.uuid is empty, seems as it is not an annex >&2
        exit 1
    fi
    info_line="$(ga info --fast | grep $repouuid)"
    found_it=0
    # FIXME: The regexp is relaxed here because some suspicious 
    # behaviour from git-annex, it places remotes there. They're also in 
    # the JSON output, so it looks like a bug. — Sønnyen, 2016-04-29
    echo "$info_line" | grep -q " -- $here .*\\[here\\]" && found_it=1
    if test "$found_it" = "1"; then
        echo $progname: Description looks ok, not changing it >&2
        exit 0
    else
        ga sync
        sess -- ga describe here "$here"
        ga sync
        echo
        echo $progname update-desc: Before: $info_line >&2
        echo $progname update-desc: After : $(
            ga info --fast | grep $repouuid
        ) >&2
        echo
    fi
else
    git-annex "$@"
fi
