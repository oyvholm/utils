#!/bin/bash

#=======================================================================
# ga
# File ID: e89047ce-29d1-11e2-bb6f-00c0a8deee11
#
# Customised frontend to git-annex
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=ga
VERSION=0.2.0

if test "$1" = "--version"; then
    echo $progname $VERSION
    exit 0
fi

if test "$1" = "-h" -o "$1" = "--help"; then
    cat <<END

Customised frontend to git-annex.

Usage: $progname [options] git-annex_commands_and_options

The following commands (first non-option on the command line) are 
customised:

  init
    Initialise annex.uuid with UUID v1 (time-based UUID) instead of v4 
    (random-based), which is the default. This is done before executing 
    an ordinary "git annex init". Will abort if annex.uuid already is 
    defined. Also, if any other command is executed and annex.uuid 
    doesn't exist, the script aborts. This is to make sure no git-annex 
    setup is done in non-annex repositories.
  sync
    Execute "git wait-until-clean -u" before syncing, i.e., wait until 
    the repository is clean before continuing. This is to avoid any 
    accidental commits.
  fsck
    Filter the output through ga-fsck-size, calculates how much space is 
    needed to get enough file copies.
  md
    Shortcut for "metadata".
  unused
    Filter the output through ga-sumsize, display total number of bytes 
    in unused files.

After all this, it checks that "git annex pre-commit ." is disabled in 
.git/hooks/pre-commit . This is to avoid an automatic "git annex fix" 
that automatically fixes broken symlinks before commit. This makes it 
hard to track file renames, as it breaks "git log --follow" and friends.

Options:

  -h, --help
    Show this help.
  --version
    Print version information.

END
    exit 0
fi

if test "$1" = "init"; then
    if test -z "$(git config --get annex.uuid)"; then
        git config annex.uuid $(suuid -wa -t ga_init)
    else
        echo $progname: Repository is already initialised for git-annex >&2
        exit 1
    fi
else
    if test -z "$(git config --get annex.uuid)"; then
        if test "$1" = "sync"; then
            echo $progname: Not a git-annex repo, exec git fp and git mff >&2
            git fp
            git mff
            exit
        else
            echo $progname: annex.uuid is not defined, aborting >&2
            exit 1
        fi
    fi
fi

# Check that "git annex pre-commit ." is commented out in 
# .git/hooks/pre-commit, I don't want to let "git commit" run "git annex 
# fix" automatically when I've moved files around. I want to be able to 
# track moves, and it breaks "git log --follow". If it's not disabled, 
# do it automatically.
precommit="$(git rev-parse --show-toplevel)/.git/hooks/pre-commit"
if test -f "$precommit"; then
    grep -q '^git.*annex.*pre-commit' "$precommit" && {
        perl -p -i -e 's/^(git.annex.+pre-commit)/# $1/' "$precommit"
        echo $progname: $precommit: Have disabled git annex pre-commit: >&2
        cat "$precommit" >&2
    }
fi

if test "$1" = "sync"; then
    git wait-until-clean -u
fi

if test "$1" = "fsck"; then
    shift
    git-annex fsck "$@" 2>&1 | ga-fsck-size
elif test "$1" = "md"; then
    shift
    git-annex metadata "$@"
elif test "$1" = "unused"; then
    shift
    git-annex unused "$@" | ga-sumsize
else
    git-annex "$@"
fi
