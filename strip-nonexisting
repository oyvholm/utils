#!/usr/bin/env bash

#=======================================================================
# strip-nonexisting
# File ID: 89302bf2-f33a-11e4-a2d5-000df06acc56
#
# Read a stream of \n-separated filenames from stdin and remove 
# everything that's not plain files or symlinks that exist locally.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=strip-nonexisting
VERSION=0.1.0

ARGS="$(getopt -o "\
h\
q\
v\
" -l "\
help,\
quiet,\
verbose,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_quiet=0
opt_verbose=0
while :; do
    case "$1" in
        (-h|--help) opt_help=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Read a stream of \\n-separated filenames from stdin and remove 
everything that's not plain files or symlinks that exist locally.

Can be used with git-annex, for example:

  git log --raw --since=1.week "\$@" | grep ^: | cut -f 2 | sort -u | \\
    strip-nonexisting | xargs -d \\\\n git annex fsck --quiet

will run a "git annex fsck --quiet" on every file added less than one 
week ago. git annex will refuse to run if it receives any invalid paths, 
and that's ok.

Only files or symlinks will be listed. Everything else (directories, 
fifos, device files, etc) is removed.

Usage: $progname [options]

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

while read f; do
    test -f "$f" -o -L "$f" && echo "$f"
done
