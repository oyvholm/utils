#!/usr/bin/env perl

#=======================================================================
# fromhex
# File ID: 17c58aec-f743-11dd-a648-000475e441b9
#
# Converts a hexadecimal string to plain text.
#
# Character set: UTF-8
# ©opyleft 2006– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'decimal' => 0,
    'help' => 0,
    'quiet' => 0,
    'unicode' => 0,
    'verbose' => 0,
    'version' => 0,
    'warnings' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'decimal|d' => \$Opt{'decimal'},
    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'unicode|u' => \$Opt{'unicode'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},
    'warnings|w' => \$Opt{'warnings'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main());

sub main {
    # {{{
    my $Retval = 0;

    if ($Opt{'unicode'}) {
        binmode(STDOUT, ':utf8');
    }

    if ($Opt{'decimal'}) {
        while (<>) {
            s/(\d+)/print_decimal($1)/seig;
        }
    } else {
        if ($Opt{'unicode'}) {
            if (!$Opt{'warnings'}) {
                no warnings "utf8";
                # Not very elegant to duplicate code like this, but 'no 
                # warnings' only works in the local scope.
                while (<>) {
                    s/([\da-f]+)/print(chr(hex($1)))/seig;
                }
            } else {
                while (<>) {
                    s/([\da-f]+)/print(chr(hex($1)))/seig;
                }
            }
        } else {
            my $buf = '';
            while (my $line = <>) {
                $line =~ s/[^\da-f]//sig;
                $buf .= $line;
                $buf =~ s/([\da-f][\da-f])/print(chr(hex($1))), ''/seig;
            }
        }
    }

    return $Retval;
    # }}}
} # main()

sub print_decimal {
    # {{{
    my $val = shift;
    if ($val > 255 && !$Opt{'unicode'}) {
        warn("$progname: Cannot print byte value $val in bytewise mode, use -u\n");
        exit(1);
    } else {
        if (!$Opt{'warnings'}) {
            no warnings "utf8";
            print(chr($val));
        } else {
            print(chr($val));
        }
    }
    return('');
    # }}}
} # print_decimal()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Converts a hexadecimal string to plain text.

Usage: $progname [options] [file [files [...]]]

Options:

  -d, --decimal
    Create bytes from decimal (base 10) numbers.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -u, --unicode
    Use Unicode mode. If any values are higher than U+007F (127), output 
    the character as a UTF-8 sequence instead of bytewise output. I.e. 
    the character U+263A will be output as the bytes "e2 98 ba" instead 
    of "26 3a".
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  -w, --warnings
    Enable Perl warnings about invalid UTF-8. Use this if you want to 
    generate safe UTF-8 or be warned about invalid code points in 
    (hexa)decimal input.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
