#!/bin/bash

#=======================================================================
# git-upstream
# File ID: cb907ea4-4d42-11e5-8090-fefdb24f8e10
#
# Set up local branches to track remote branches.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=git-upstream
VERSION=0.2.0

ARGS="$(getopt -o "hqv" -l "help,quiet,verbose,version" \
    -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_quiet=0
opt_verbose=0
while :; do
    case "$1" in
        (-h|--help) opt_help=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Set up local branches to track remote branches. If no remote is 
specified, 'origin' is used.

Usage: $progname [options] [remote [branches]]

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

remote=origin
test -n "$1" && { remote="$1"; shift; }
git remote | grep -q "^$remote\$" || {
    echo $progname: $remote: No local remote with that name found >&2
    exit 1
}

if test -n "$1"; then
    branches="$@"
else
    branches="$(
        git branch |
        fmt -1 |
        tr -d '\t ' |
        grep -v -E '^(->|\*)$'
    )"
fi

for f in $branches; do
    git -c "advice.setupstreamfailure=false" branch -u "$remote/$f" "$f"
done
