#!/usr/bin/env perl

#=======================================================================
# git-scanrefs
# File ID: 43e51bbe-2825-11e5-9340-000df06acc56
#
# [Description]
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'help' => 0,
    'quiet' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my %checked = (); # Contains all potential shas checked

exit(main());

sub main {
    # {{{
    my $Retval = 0;
    my %printed = ();

    while (my $line = <>) {
        chomp($line);
        my @result = potential_refs($line);
        for my $curr (@result) {
            my $act = actual_ref($curr);
            if (length($act) && !$printed{"$act"}) {
                print("$act\n");
                $printed{"$act"} = 1;
            }
        }
    }

    return $Retval;
    # }}}
} # main()

sub potential_refs {
    my $orig = shift;
    my $str = $orig;
    my @retval = ();
    msg(4, "Entering potential_refs('$orig')");
    $str =~ s{
        ([0-9a-f]{7,})
    }{
        my $pot = $1;
        msg(4, "\$pot = '$pot'");
        if (!$checked{"$pot"}) {
            msg(4, "'$pot' is not checked before");
            push(@retval, $pot);
            $checked{"$pot"} = 1;
        };
        '';
    }xegs;
    msg(4, "\$str afterwards: '$str'");
    msg(4, "scalar(retval) = '" . scalar(@retval) . "'");
    msg(3, "potential_refs('$orig') returns ['" . join("', '", @retval) . "']");
    return(@retval);
} # potential_refs()

sub actual_ref {
    my $ref = shift;
    chomp(my $result = `git rev-parse --quiet --verify $ref`);
    msg(4, "is_actual_ref(): \$result = '$result'");
    my $retval = ($result =~ /^[0-9a-f]{40}/) ? $result : '';
    msg(4, "is_actual_ref('$ref') returns '$retval'");
    return($retval);
} # actual_ref()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options] [file [files [...]]]

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
