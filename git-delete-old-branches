#!/bin/bash

#=======================================================================
# git-delete-old-branches
# File ID: b2a8aec0-3649-11e6-912b-02010e0a6634
#
# Delete obsolete Git branches after displaying some info about them
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=git-delete-old-branches
VERSION=0.5.1

ARGS="$(getopt -o "\
d:\
h\
o\
q\
v\
" -l "\
dbname:,\
help,\
once,\
quiet,\
verbose,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_dbname=''
opt_help=0
opt_once=0
opt_quiet=0
opt_verbose=0
while :; do
    case "$1" in
        (-d|--dbname) opt_dbname="$2"; shift 2 ;;
        (-h|--help) opt_help=1; shift ;;
        (-o|--once) opt_once=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Delete obsolete Git branches locally and from all remotes. For each 
branch, display a "git diff --stat" against all local and remote 
branches with this name, a simplified --graph log, and finally a git log 
with patch against all branches. Display this in less(1), and ask if all 
branches with this name should be deleted.
The following responses are valid:

"y" - Delete all branches with this name locally and from all remotes
      and mark it as garbage.
"n" - Don't delete the branch. If -o/--once is used later, files marked
      with "n" will not be checked.
"q" - Exit the program.

Usage: $progname [options] BRANCH [BRANCH [...]]

Options:

  -d FILE, --dbname FILE
    Store answers in the SQLite database FILE. Can be used to automate 
    deletions later.
  -h, --help
    Show this help.
  -o, --once
    Don't ask about branches that have been answered "n" to earlier.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

db="$opt_dbname"
dbversion=1

listbr() {
    git br -a | rmspcall | grep -E "(^|/)$1\$"
}

sql() {
    test -z "$db" && return
    echo "$@" | sqlite3 "$db"
}

add_entry() {
    sql "
INSERT OR REPLACE
  INTO branches (yn, branch, date)
  VALUES('$1', '$2', datetime('now'));
"
}

sql "
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS branches (
  yn TEXT
    CONSTRAINT branches_yn_contents
      CHECK (yn = 'y' OR yn = 'n' OR yn IS NULL),
  branch TEXT
    CONSTRAINT branches_branch_length
      CHECK (length(branch) > 0)
    UNIQUE
    NOT NULL,
  date TEXT
    DEFAULT (datetime('now'))
    CONSTRAINT branches_date_length
      CHECK (date IS NULL OR length(date) = 19)
    CONSTRAINT branches_date_valid
      CHECK (date IS NULL OR datetime(date) IS NOT NULL)
);
CREATE TABLE IF NOT EXISTS meta (
  key TEXT
    CONSTRAINT meta_key_length
      CHECK (length(key) > 0)
    UNIQUE
    NOT NULL,
  value TEXT
);
INSERT OR IGNORE INTO meta (key, value)
  VALUES('program', 'git-delete-old-branches');
INSERT OR IGNORE INTO meta (key, value)
  VALUES('url',
   'https://gitlab.com/sunny256/utils/blob/master/git-delete-old-branches');
INSERT OR IGNORE INTO meta (key, value)
  VALUES('dbversion', '$dbversion');
COMMIT;
"

currversion=$(sql "SELECT value FROM meta WHERE key = 'dbversion';")
if test -n "$currversion"; then
    if test $currversion -gt $dbversion; then
        (echo $progname: Database version of $db is too new.
        echo $progname: The db version is $currversion, and this program can
        echo $progname: only handle databases up to version $dbversion.) >&2
        exit 1
    fi
fi

unset LESS

for f in "$@"; do
    if test -n "$db" -a "$opt_once" = "1"; then
        sql "SELECT branch FROM branches WHERE branch = '$f' AND yn = 'n';" |
            grep -q . && continue
    fi
    if test $opt_verbose -ge 1; then
        echo
        echo $progname: Check \"$f\" branches
        listbr "$f"
    fi
    listbr "$f" | grep -q . || continue
    clear
    (
        echo $f
        echo
        git diff --stat $(listbr "$f" | perl -pe 's/^/.../;')
        echo
        git log -C -C -M -M --abbrev-commit --decorate=short --format=oneline \
          --graph $(
            listbr "$f" | perl -pe 's/^/../;'
        )
        echo
        git log -C -C -M -M --date-order --date=iso --decorate=short \
          --format=fuller --graph -c -p $(listbr "$f" | perl -pe 's/^/../;')
    ) | less -S
    echo -n "Delete all '$f' branches? " >&2
    unset valg
    read valg </dev/tty
    if test "$valg" = "y"; then
        git dbr $(listbr "$f")
        add_entry y "$f"
    elif test "$valg" = "n"; then
        add_entry n "$f"
    elif test "$valg" = "q"; then
        exit 0
    fi
done
