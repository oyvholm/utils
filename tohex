#!/usr/bin/env perl

#=======================================================================
# tohex
# File ID: 3ced9aa2-f744-11dd-9353-000475e441b9
#
# Convert files to hex
#
# Character set: UTF-8
# ©opyleft 2008– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'decimal' => 0,
    'help' => 0,
    'quiet' => 0,
    'unicode' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'decimal|d' => \$Opt{'decimal'},
    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'unicode|u' => \$Opt{'unicode'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my $print_str = $Opt{'decimal'} ? "%u" : "%02x";
my $spc = '';
my $count = 0;

exit(main());

sub main {
    # {{{
    my $Retval = 0;

    if (scalar(@ARGV)) {
        warn("$progname: $ARGV[0]: Unknown command line argument\n");
        exit(1);
    }

    if ($Opt{'unicode'}) {
        binmode(STDIN, ':utf8');
    }

    while (<STDIN>) {
        s/(.)/print_byte(ord($1))/gse;
        print;
    }
    print "\n";

    return($Retval);
    # }}}
} # main()

sub print_byte {
    # {{{
    my $val = shift;
    if ($count > 15) {
        print("\n");
        $count = 0;
        $spc = '';
    }
    printf("$spc$print_str", $val);
    $count++;
    $spc = ' ';
    return('');
    # }}}
} # print_byte()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options]

Options:

  -d, --decimal
    Use decimal (10 base) output instead of hex.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -u, --unicode
    Output Unicode values instead of bytes when reading UTF-8. For 
    example, when reading the character U+2620, output "2620" instead of 
    "e2 98 a0" when this option is used. Likewise, when combined with 
    --decimal, output "9760" instead of "226 152 160".
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
