#!/bin/sh

#==============================================================================
# log_df
# File ID: 99575e5c-5d3e-11df-9eee-90e6ba3022ac
#
# Log disk space.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#==============================================================================

progname=log_df
VERSION=0.6.0

opt_dbname=''
opt_help=0
opt_host=''
opt_quiet=0
opt_verbose=0
while test -n "$1"; do
	case "$1" in
	-d|--dbname) opt_dbname="$2"; shift 2 ;;
	-h|--help) opt_help=1; shift ;;
	--host) opt_host="$2"; shift 2 ;;
	-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
	-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
	--version) echo $progname $VERSION; exit 0 ;;
	--) shift; break ;;
	*)
		if printf '%s\n' "$1" | grep -q ^-; then
			echo "$progname: $1: Unknown option" >&2
			exit 1
		else
			break
		fi
	break ;;
	esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
	test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
	cat <<END

Log disk space.

Usage: $progname [options]

Options:

  -d DBFILE, --dbname DBFILE
    Use DBFILE as database file for SQLite.
  -h, --help
    Show this help.
  --host HOSTNAME
    Use HOSTNAME as value in the host column.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
	exit 0
fi

msg() {
	echo "$progname: $*" >&2
}

SQLITE=sqlite3
dbversion=2
logdir="$HOME/log"
db="$logdir/df.sqlite"
if test -n "$opt_host"; then
	host="$opt_host"
else
	host=$(hostname)
fi
if test -n "$opt_dbname"; then
	db="$opt_dbname"
	logdir="$(dirname "$db")"
fi

[ -d "$logdir" ] || mkdir -p "$logdir" || {
	msg $logdir: Could not create directory
	exit 1
}

sql_create_table_meta=$(cat <<SQL_END
CREATE TABLE meta (
  key TEXT
    UNIQUE
    NOT NULL
  ,
  value TEXT
);
INSERT INTO meta VALUES ('dbversion', '$dbversion');
SQL_END
)

sql_create_table_df=$(cat <<SQL_END
CREATE TABLE df (
  date TEXT
    CONSTRAINT df_date_length
      CHECK (length(date) = 19)
    CONSTRAINT df_date_valid
      CHECK (datetime(date) IS NOT NULL)
    NOT NULL
  ,
  host TEXT
    CONSTRAINT df_host_length
      CHECK (length(host) > 0)
    NOT NULL
  ,
  mountp TEXT
    CONSTRAINT df_mountp_length
      CHECK (length(mountp) > 0)
    NOT NULL
  ,
  device TEXT
    CONSTRAINT df_device_length
      CHECK (length(device) > 0)
    NOT NULL
  ,
  size INTEGER
    CONSTRAINT df_size_length
      CHECK (length(size) > 0)
    CONSTRAINT df_size_positive
      CHECK (size >= 0)
    NOT NULL
  ,
  used INTEGER
    CONSTRAINT df_used_length
      CHECK (length(used) > 0)
    CONSTRAINT df_used_positive
      CHECK (used >= 0)
    NOT NULL
  ,
  free INTEGER
    CONSTRAINT df_free_length
      CHECK (length(free) > 0)
    CONSTRAINT df_free_positive
      CHECK (free >= 0)
    NOT NULL
  ,
  UNIQUE (date, host, mountp)
    ON CONFLICT IGNORE
);
SQL_END
)

sql_create_trigger_nodups=$(cat <<SQL_END
CREATE TRIGGER nodups
  BEFORE INSERT ON df
  BEGIN
    SELECT RAISE (IGNORE)
      WHERE
        (SELECT used FROM df
          WHERE mountp = NEW.mountp
          ORDER BY date DESC
          LIMIT 1) = NEW.used;
  END;
SQL_END
)

if test ! -f "$db"; then
	msg Creating database $db
	cat <<SQL_END | $SQLITE "$db"
BEGIN EXCLUSIVE TRANSACTION;
$sql_create_table_meta
$sql_create_table_df
$sql_create_trigger_nodups
COMMIT;
SQL_END
fi

curr_db_version=$(
    $SQLITE "$db" "SELECT value FROM meta WHERE key = 'dbversion';"
)

upgrade_db() {
	if test "$curr_db_version" = "$dbversion"; then
		msg Database $db is already version $dbversion
		return 0
	fi
	backup="$db.$(date -u +"%Y%m%dT%H%M%SZ").db-upgrade.bck"
	if test -e "$backup"; then
		# Shouldn't happen, but keep it safe
		msg Database backup $backup already exists, aborting
		return 1
	fi
	cp -p "$db" "$backup" || {
		msg Could not backup database $db to $backup
		return 1
	}
	msg Database backup stored as $backup

	sql="BEGIN EXCLUSIVE TRANSACTION;
"
	if test -z "$curr_db_version"; then
		# First version without meta table
		msg Upgrading database to version 1
		sql="$sql$(cat <<SQL_END
$sql_create_table_meta
SQL_END
)"
		curr_db_version=1
	fi
	if test $curr_db_version -lt 2; then
		# Version 2
		# - add host column and set all earlier entries to the current
		#   host name
		# - delete percent column
		msg Upgrading database to version 2
		sql="$sql$(cat <<SQL_END
CREATE TABLE tmp_df AS
  SELECT date, '$host' AS host, mountp, device, size, used, free FROM df;
DROP TABLE df;
$sql_create_table_df
$sql_create_trigger_nodups
INSERT INTO df
  SELECT *
    FROM tmp_df;
DROP TABLE tmp_df;
UPDATE meta SET value = 2
  WHERE key = 'dbversion';
SQL_END
)"
		curr_db_version=2
	fi

	sql="$sql
COMMIT;
VACUUM;
"

	echo "$sql" | $SQLITE "$db" || return 1
	msg Database $db successfully upgraded to version $dbversion
	return 0
}

if test -z "$curr_db_version"; then
	msg dbversion not found, upgrading database $db
	upgrade_db || {
		msg Database upgrade failed
		exit 1
	}
fi

if test $curr_db_version -lt $dbversion; then
	msg Database $db is version $curr_db_version, needs upgrade
	upgrade_db || {
		msg Database upgrade failed
		exit 1
	}
fi

df -B 1 -P |
    grep ^/ |
    sort -u |
    perl -e "
while (<>) {
	chomp();
	if (/^(\\S+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)%\\s+(\\S+)\$/) {
		my (\$device, \$size, \$used, \$free, \$mountp) =
		   (     \$1,    \$2,    \$3,    \$4,      \$6);
		print(
		    \"INSERT INTO df \" .
		      \"(date, host, mountp, \" .
		        \" device, size, used, free) \" .
		      \"VALUES (\" .
		        \"datetime('now'), '$host', '\$mountp', \" .
		        \"'\$device', \$size, \$used, \$free\" .
		      \");\\n\" .
		      \"\" .
		      \"\"
		);
	} else {
		warn(\"$progname: Invalid line: \\"\$_\\"\\n\");
	}
}
" | $SQLITE "$db"

# vim: set ts=8 sw=8 sts=8 noet fo+=w tw=79 fenc=UTF-8 :
