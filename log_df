#!/bin/bash

#=======================================================================
# log_df
# File ID: 99575e5c-5d3e-11df-9eee-90e6ba3022ac
#
# Log disk space.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=log_df
VERSION=0.2.1

ARGS="$(getopt -o "\
h\
q\
v\
" -l "\
help,\
quiet,\
verbose,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_quiet=0
opt_verbose=0
while :; do
    case "$1" in
        (-h|--help) opt_help=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Log disk space.

Usage: $progname [options]

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

SQLITE=sqlite3
logdir="$HOME/log"
db="$logdir/df.sqlite"

[ -d "$logdir" ] || mkdir -p "$logdir" || {
    echo "$progname: $logdir: Could not create directory" >&2
    exit 1
}

if test ! -f "$db"; then
    cat <<SQL_END | $SQLITE "$db"
CREATE TABLE df (
  date TEXT
    CONSTRAINT df_date_length
      CHECK (length(date) = 19)
    CONSTRAINT df_date_valid
      CHECK (datetime(date) IS NOT NULL)
    NOT NULL
  ,
  mountp TEXT
    CONSTRAINT df_mountp_length
      CHECK (length(mountp) > 0)
    NOT NULL
  ,
  device TEXT
    CONSTRAINT df_device_length
      CHECK (length(device) > 0)
    NOT NULL
  ,
  size INTEGER
    CONSTRAINT df_size_positive
      CHECK (size > 0)
    NOT NULL
  ,
  used INTEGER
    CONSTRAINT df_used_positive
      CHECK (used > 0)
    NOT NULL
  ,
  free INTEGER
    CONSTRAINT df_free_length
      CHECK (length(free) > 0)
    NOT NULL
  ,
  percent REAL
    CONSTRAINT df_percent_length
      CHECK (length(percent) > 0)
    NOT NULL
);
CREATE TRIGGER nodups
  BEFORE INSERT ON df
  BEGIN
    SELECT RAISE (IGNORE)
      WHERE
        (SELECT used FROM df
          WHERE mountp = NEW.mountp
          ORDER BY date DESC
          LIMIT 1) = NEW.used;
  END;
SQL_END
fi

df -B 1 -P |
    grep ^/ |
    sort -u |
    perl -e "
while (<>) {
    chomp();
    if (/^(\\S+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)%\\s+(\\S+)\$/) {
        my (\$device, \$size, \$used, \$free, \$percent, \$mountp) =
            (\$1, \$2, \$3, \$4, \$5, \$6);
        print(
            \"INSERT INTO df \" .
            \"(date, mountp, device, size, used, free, percent) \" .
            \"VALUES (\" .
            \"datetime('now'), '\$mountp', '\$device', \" .
            \"\$size, \$used, \$free, \$percent\" .
            \");\\n\" .
            \"\" .
            \"\"
        );
    } else {
        warn(\"$progname: Invalid line: \\"\$_\\"\\n\");
    }
}
" | $SQLITE "$db"
