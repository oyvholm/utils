#!/bin/bash

#=======================================================================
# wi
# File ID: afcf3af0-27a5-11e1-b643-4b2592583869
# [Description]
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=wi
version=0.0.1

msg() {
    echo $* >&2
}

unset test_simul
if test "$1" = "--test-simul"; then
    test_simul=1
    shift
fi

if test "$1" = "-h" -o "$1" = "--help"; then
    cat <<END

Search the suuids database and send results to stdout.

Syntax: $progname [options] [search expression]

Options:

    -h, --help
        Show this help.
    --test-simul
        If this is specified as first argument, don't actually do 
        anything. This will only send diagnostic messages to stderr. 
        Used by 'wi.t'.
    --version
        Display program version.

"-a" and "-o" can be used as modifiers to the search. "-a" is replaced 
by "AND" and "-o" is replaced with OR.

-i turns case sensitivity OFF for all following search patterns ('abc' 
will find 'abc', 'ABC' and 'AbC', etc).

For example:

    abc -o def
        abc OR def (default)
    abc -a def
        abc AND def
    abc -a def -o ghi
        abc AND def OR ghi
    -a abc def
        abc AND def
    abc def -a ghi jkl -o mno
        abc OR def AND ghi AND jkl OR mno

    abc -i def
       Searches for 'abc' OR all variants of 'def', i.e., 'DEF' and 
       'DeF' are also found.
    abc -a def -i ghi -o jkl
        Find (lowercase abc) AND (lowercase def) AND (all-case ghi) OR 
        (all-case jkl).

END
    exit 0
fi

if test "$1" = "--version"; then
    echo $progname v$version
    exit 0
fi

search_str=
stdin=
andor=OR

if test -z "$1"; then
    stdin="`finduuid -u`"
fi

unset add_str
like_str=LIKE
for f in "$@" $stdin; do
    test -n "$test_simul" && msg f = \'$f\'
    case "$f" in
        (-a)
            test -n "$test_simul" && msg andor set to AND
            andor=AND
            ;;
        (-i)
            like_str=ILIKE
            ;;
        (-o)
            test -n "$test_simul" && msg andor set to OR
            andor=OR
            ;;
        (*)
            test -n "$add_str" && or_str="$andor "
            search_str="$search_str ${or_str}s::varchar $like_str '%$f%'"
            add_str="1"
            ;;
    esac
done

test -z "$search_str" && {
    echo $progname: No search strings found >&2
    exit 1
}

sql_str="COPY (SELECT s FROM uuids WHERE$search_str) TO STDOUT;"

if test -n "$test_simul"; then
    # --test-simul is specified as $1, only output what would've been 
    # done
    echo "$sql_str"
else
    echo "$sql_str" | psql suuids | sort -u | less
fi
