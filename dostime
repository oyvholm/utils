#!/usr/bin/env perl

#=======================================================================
# dostime
# File ID: 0b7a06a0-2e6a-11e4-a319-c80aa9e67bbd
#
# Change file modification time from odd to even seconds because some 
# file systems are too damn stupid to cope with them. Used to get rid of 
# differences between timestamps of files in *NIX filesystems and DOSish 
# ones.
#
# Character set: UTF-8
# ©opyleft 2014– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'dry-run' => 0,
    'help' => 0,
    'quiet' => 0,
    'verbose' => 0,
    'version' => 0,
    'zero' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.1';

Getopt::Long::Configure('bundling');
GetOptions(

    'dry-run|n' => \$Opt{'dry-run'},
    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},
    'zero|z' => \$Opt{'zero'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main());

sub main {
    # {{{
    my $Retval = 0;

    $Opt{'zero'} && ($/ = "\x00");

    for my $curr (@ARGV) {
        $Retval |= process_file($curr);
    }
    if (!-t STDIN) {
        while (my $curr = <STDIN>) {
            chomp($curr);
            $Retval |= process_file($curr);
        }
    }

    return $Retval;
    # }}}
} # main()

sub process_file {
    # {{{
    my $curr = shift;

    if (-e $curr) {
        my ($atime, $mtime) = (stat($curr))[8,9];
        defined($mtime)
            or (warn("$progname: $curr: Could not stat file: $!\n"), return 1);
        my $origtime = $mtime;

        $mtime = $mtime >> 1;
        $mtime = $mtime << 1;

        if (!$Opt{'dry-run'}) {
            utime($atime, $mtime, $curr)
                or (warn("$progname: $curr: Could not set file time: $!\n"), return 1);
        }
        $Opt{'verbose'} && printf("%s: %s: mtime changed from %s to %s%s\n",
            $progname, $curr, sec_to_string($origtime), sec_to_string($mtime),
            $Opt{'dry-run'} ? " (SIMULATING)" : "",
        );
    } else {
        warn("$progname: $curr: File not found\n");
        return 1;
    }

    return 0;
    # }}}
} # process_file()

sub sec_to_string {
    # Convert seconds since 1970 to "yyyymmddThhmmss[.frac]Z"
    # {{{
    my ($Seconds) = @_;
    length($Seconds) || return(undef);
    ($Seconds =~ /^-?(\d*)(\.\d+)?$/) || return(undef);
    my $Secfrac = ($Seconds =~ /^([\-\d]*)(\.\d+)$/) ? 1.0*$2 : "";
    $Secfrac =~ s/^0//;

    my @TA = gmtime($Seconds);
    my($DateString) = sprintf("%04u-%02u-%02uT%02u:%02u:%02u%sZ",
                              $TA[5]+1900, $TA[4]+1, $TA[3],
                              $TA[2], $TA[1], $TA[0], $Secfrac);
    return($DateString);
    # }}}
} # sec_to_string()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options] [file [files [...]]]

Change file modification time from odd to even seconds because some file 
systems are too damn stupid to cope with them. Used to get rid of 
differences between timestamps of files in *NIX filesystems and DOSish 
ones. Files can be specified on the command line and/or be read from 
stdin.

Options:

  -h, --help
    Show this help.
  -n, --dry-run
    Simulate what would be done, don't actually change the timestamps.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  -z, --zero
    Filenames from stdin are separated by zero (NULL) bytes.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
