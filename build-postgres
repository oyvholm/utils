#!/bin/bash

#=======================================================================
# build-postgres
# File ID: 86126f82-2e60-11e5-bf33-fefdb24f8e10
#
# Compile and install the Postgres version stored in $srcdir .
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=build-postgres
VERSION=0.1.0

if test "$1" = "--version"; then
    echo $progname $VERSION
    exit 0
fi

if test "$1" = "-h" -o "$1" = "--help"; then
    cat <<END

Usage: $progname [options]

Options:

  -h, --help
    Show this help.
  -u, --update
    Fetch new commits and update the source code.
  --version
    Print version information.

END
    exit 0
fi

msg() {
    unset no_lf
    if test "$1" = "-n"; then
        # If -n is first argument, don't terminate with \n
        local no_lf="-n"
        shift
    fi
    if test "$1" = "-s"; then
        # If -s is specified, skip initial \n
        shift
    else
        echo >&2
    fi
    echo $no_lf "$progname: $*" >&2
    return
}

srcdir="$HOME/src/other/postgres"
cd "$srcdir" || exit 1

if test "$1" = "-u" -o "$1" = "--update"; then
    git fetch origin
    git merge --ff-only
    git allbr origin
    shift
fi

user=sunny
pgdesc="$(git desc --long --tags)"
pgdir="postgres-$pgdesc"
prefix="/usr/local"
prgdir="$prefix/prg"
destdir="$prefix/varprg/$pgdir"
dbroot="/var/lib/postgresql"
dumpfile="$dbroot/$(date -u +"%Y%m%dT%H%M%SZ").all.pgdump.gz"

test -e "$destdir" && {
    echo $progname: $destdir already exists >&2
    exit 1
}

test -e "$dbroot/$pgdesc/main" && {
    echo $progname: $dbroot/$pgdesc/main already exists >&2
    exit 1
}

git wait-until-clean
msg Remove ignored files from $(pwd)/
git clean -fxd || {
    msg \"git wait-until-clean\" or \"git clean\" failed
    exit 1
}

old_version="$($prgdir/postgres/bin/postgres --version 2>/dev/null | fmt -1 | tail -1)"

msg New commits since $old_version:
git log --abbrev-commit --date-order --decorate=short --graph \
  --pretty=format:'%Cred%h %Cblue%p%Creset -%Creset %s %Cgreen(%cd %Cblue%an%Cgreen)%Creset%C(yellow)%d%Creset' \
  $old_version..

msg Current databases: &&
psql -c '\l+' &&

msg mkdir $destdir &&
sudo mkdir -p "$destdir" &&

msg chown $user.$user $destdir &&
sudo chown $user.$user "$destdir" &&

msg Run ./configure &&
./configure --prefix="$destdir" --with-extra-version="+$pgdesc" \
  --enable-debug --with-libxml --with-openssl --with-perl --with-uuid=ossp &&

msg make world &&
make world &&

msg make check &&
make check &&

msg make install-world &&
make install-world &&

until sudo -u postgres echo postgres pwd OK | grep -q "postgres pwd OK"; do
    :
done &&

msg Dump all databases to $dumpfile &&
sudo -u postgres bash -c "pg_dumpall | gzip >\"$dumpfile\"" &&

msg pg_ctl stop &&
sudo -u postgres pg_ctl -D "$dbroot/current/main" stop &&

msg Update the $prgdir/postgres symlink &&
cd "$prgdir" &&
sudo ln -fnsv "../varprg/$pgdir" postgres &&

msg Create \'current\' symlink to $pgdesc &&
sudo -u postgres ln -fnsv "$pgdesc" "$dbroot/current" &&

msg initdb &&
sudo -u postgres initdb --lc-collate=C -E UTF-8 "$dbroot/$pgdesc/main" &&

msg pg_ctl start &&
sudo -u postgres pg_ctl -D "$dbroot/$pgdesc/main" -l "$dbroot/$pgdesc/logfile" start &&

sudo -u postgres bash -c "until pg_isready -q; do sleep 1; done" &&

msg build-postgis &&
build-postgis &&

msg Restore databases from $dumpfile &&
sudo -u postgres bash -c "zcat \"$dumpfile\" | psql postgres" &&

msg Create manpage symlinks &&
for f in 1 3 7; do
    cd "$prefix/share/man/man$f" &&
    sudo ln -nfsv ../../../prg/postgres/share/man/man$f/* . || true
done &&

echo &&
echo $progname: Old version: $old_version >&2 &&
echo $progname: New version: $($prgdir/postgres/bin/postgres --version | fmt -1 | tail -1) >&2 &&

if test -d "$prefix/.git/."; then
    msg Commit the symlink &&
    commitmsg=$(echo $progname installed $pgdir on $(hostname); echo; suuid -t commit,$progname) &&
    cd "$prgdir" &&
    sudo git add postgres &&
    echo Commit message: &&
    echo $commitmsg &&
    sudo git commit -m "$commitmsg" &&
    msg \"git pa\" in $(pwd) &&
    (git pa || true)
fi &&

echo &&
echo $progname finished successfully >&2 &&
exit 0 || {
    msg Something went wrong, aborted
    sudo rmdir "$destdir"
    exit 1
}
