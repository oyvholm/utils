#!/usr/bin/env bash

#=======================================================================
# STDfilenameDTS
# File ID: STDuuidDTS
#
# [Description]
#
# Author: Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=STDfilenameDTS
VERSION=0.0.0

ARGS="$(getopt -o "\
h\
q\
v\
" -l "\
help,\
quiet,\
verbose,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_quiet=0
opt_verbose=0
while :; do
    case "$1" in
        -h|--help) opt_help=1; shift ;;
        -q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        -v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        --version) echo $progname $VERSION; exit 0 ;;
        --) shift; break ;;
        *) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Usage: $progname [options]

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

topdir=/home/directory_that_does_not_exist-STDuuidDTS

# What the STDfilenameDTS script shall return, switch the values if the test 
# returns 0 for error and !0 for success.
good=0
bad=1

function cleangit {
    cd $topdir || {
        echo "STDfilenameDTS: $topdir: Cannot change directory, aborting." >&2
        exit 150
    }
    if [ ! -d .git/. ]; then
        echo -n "STDfilenameDTS: $topdir: " >&2
        echo "Doesn’t contain a .git directory, aborting." >&2
        exit 150
    fi
    git clean -fxd
    git co -f
}

function inittest {
    : Things like ./configure and make goes here
}

function runtest {
    : The actual test goes here and should return !$good on error
}

cleangit
cd $topdir
inittest
runtest || { echo STDfilenameDTS: bad, returns $bad; exit $bad; }
echo STDfilenameDTS: good, returns $good
exit $good
