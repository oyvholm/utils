#!/bin/bash

#=======================================================================
# git-ignore
# File ID: e95d1ab0-30ff-11e4-a73e-fefdb24f8e10
#
# Add entries to .gitignore and delete files from Git.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=git-ignore
VERSION=0.4.0

ARGS="$(getopt -o "\
h\
q\
s\
t\
v\
" -l "\
help,\
quiet,\
subdirs,\
top,\
verbose,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_quiet=0
opt_subdirs=0
opt_top=0
opt_verbose=0
while :; do
    case "$1" in
        (-h|--help) opt_help=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-s|--subdirs) opt_subdirs=1; shift ;;
        (-t|--top) opt_top=1; shift ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Add entries to .gitignore . Default action is to add to .gitignore in 
the local directory, this can be overriden with -t/--top to update the 
.gitignore in the top directory of the repository. Wildcards can be 
used, and if any of the arguments is a directory, a trailing slash will 
be added if it doesn't exist already.

Usage: $progname [options] file [files [...]]

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -s, --subdirs
    Don't prefix the new entries in .gitignore with '/', let the ignore 
    rule work in all subdirectories too. For example, *.o files should 
    generally be ignored all over the place, but without this option 
    only *.o files in the directory where .gitignore is located are 
    ignored.
  -t, --top
    Update the .gitignore in the top directory of the repository instead 
    of .gitignore in the current directory.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

if test -z "$1"; then
    echo $progname: No arguments specified >&2
    exit 1
fi

if test "$opt_top" = "1"; then
    gitignore="$(git rev-parse --show-toplevel)/.gitignore"
else
    gitignore=.gitignore
fi

prslash="/"
test "$opt_subdirs" = "1" && prslash=""

for f in "$@"; do
    unset termslash
    test -d "$f" && { echo "$f" | grep -q '/$' || termslash=/; }
    git ls-files -- "$f" | grep -q . && git rm -r --cached "$f"
    if test "$opt_top" = "1"; then
        # Use global .gitignore at top of repo
        echo $prslash$(git rev-parse --show-prefix)$f$termslash >>"$gitignore"
    else
        # Use local .gitignore in current directory
        echo $prslash$f$termslash >>"$gitignore"
    fi
done

sort -u "$gitignore" >"$gitignore.tmp"
mv "$gitignore.tmp" "$gitignore"
git add "$gitignore"
