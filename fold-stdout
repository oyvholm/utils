#!/usr/bin/perl

#=======================================================================
# fold-stdout
# File ID: 40153a86-f4a5-11e4-8530-000df06acc56
# [Description]
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Digest::SHA qw(sha1_hex);
use Getopt::Long;

local $| = 1;

our $Debug = 0;

our %Opt = (

    'debug' => 0,
    'help' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.00';

Getopt::Long::Configure('bundling');
GetOptions(

    'debug' => \$Opt{'debug'},
    'help|h' => \$Opt{'help'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main(%Opt));

sub main {
    # {{{
    my %Opt = @_;
    my $Retval = 0;

    my $FOLD_BEGIN = "\x7B\x7B\x7B";
    my $FOLD_END = "\x7D\x7D\x7D";
    my $fold_dir = "/tmp/folds";

    my $count = 0;
    my $fold_str = '';
    my $level = 0;
    my $suppress = 0;
    my $deleted_text = '';

    while (my $line = <>) {
        if ($line =~ /$FOLD_BEGIN/) {
            $level++;
            $suppress = 1;
            $count++;
            chomp($fold_str = $line);
            $fold_str =~ s/$FOLD_BEGIN//;
            $fold_str =~ s/^\s+(.*)$/$1/;
            $fold_str =~ s/^(.*?)\s+$/$1/;
        }
        if ($line =~ /$FOLD_END/) {
            $level--;
            $level < 0 && msg(0, "Extra end fold found, level = $level");
            if (!$level) {
                $deleted_text .= $line;
                my $data_sha = sha1_hex($deleted_text);
                -d $fold_dir || mkdir($fold_dir);
                my $destfile = "$fold_dir/fold-$data_sha";
                my $created_file = 0;
                if (open(DestFP, ">$destfile")) {
                    print(DestFP $deleted_text);
                    close(DestFP) && ($created_file = 1);
                } else {
                    warn("$progname: $destfile: Could not create file: $!\n");
                }
                printf("[ Removed %s, %u line%s%s ]\n",
                    length($fold_str) ? "\"$fold_str\"" : "Vim fold",
                    $count, $count == 1 ? '' : 's',
                    $created_file ? " stored in $destfile" : "",
                );
                $count = 0;
                $suppress = 0;
                $deleted_text = '';
            }
        } else {
            if ($suppress) {
                $count++;
                $deleted_text .= $line;
            } else {
                print("$line");
            }
        }
    }
    if ($level > 0) {
        msg(0, sprintf("Missing %u end fold%s, output may be truncated",
            $level, $level == 1 ? '' : 's'));
    }

    return($Retval);
    # }}}
} # main()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options] [file [files [...]]]

Options:

  -h, --help
    Show this help.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return('');
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
