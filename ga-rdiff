#!/bin/sh

#==============================================================================
# ga-rdiff
# File ID: 6317a006-78d9-11ea-8dd3-4f45262dc9b5
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#==============================================================================

progname=ga-rdiff
VERSION=0.3.0

std_block_size=2048

opt_block_size=$std_block_size
opt_help=0
opt_old_file=''
opt_quiet=0
opt_verbose=0
opt_whole=0
while test -n "$1"; do
	case "$1" in
	-b|--block-size) opt_block_size=$2; shift 2 ;;
	-h|--help) opt_help=1; shift ;;
	-o|--old-file) opt_old_file=$2; shift 2 ;;
	-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
	-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
	-w|--whole) opt_whole=1; shift ;;
	--version) echo $progname $VERSION; exit 0 ;;
	--) shift; break ;;
	*)
		if printf '%s\n' "$1" | grep -q ^-; then
			echo "$progname: $1: Unknown option" >&2
			exit 1
		else
			break
		fi
	break ;;
	esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
	test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
	cat <<END

Create a rdiff(1) file with differences between the previous and 
current version of a file stored in git-annex.

Usage: $progname [options] ANNEX_FILE RDIFF_FILE

Options:

  -b SIZE, --block-size SIZE
    Use SIZE as block size with "rdiff signature". Smaller size may 
    create a smaller rdiff file, but takes longer time.
    Default value: $std_block_size
  -h, --help
    Show this help.
  -o FILE, --old-file FILE
    Use FILE instead of previous version as base for the patch.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  -w, --whole
    Create rdiff patch for the whole file against /dev/null if no 
    previous version of the file was found.
  --version
    Print version information.

For example, to create rdiff files for all files in the current 
directory tree:

  \$ git annex find | while read f; do ga-rdiff "\$f" "\$f.rdiff"; done

Does not work with files renamed or moved in the newest revision.

END
	exit 0
fi

create_rdiff() {
	local src="$1" dest="$2"

	repotop=$(git rev-parse --show-toplevel)
	if [ -z "$repotop" ]; then
		echo "$progname: Could not find top of Git repo" >&2
		return 1
	fi

	local currfile=$(realpath -e "$src")
	if [ -z "$currfile" ]; then
		echo -n "$progname: $src: " >&2
		echo "Could not find annex data for current revision" >&2
		return 1
	fi

	local prevfile=$opt_old_file
	if [ -z "$opt_old_file" ]; then
		prevfile=$(git log -1 -p --color=never "$src" \
		| grep ^- \
		| grep -F .git/annex/objects/ \
		| sed 's/^.*\.git/.git/')
		prevfile=$(cd "$repotop" && test -e "$prevfile" \
		           && realpath -e "$prevfile")
		if [ -z "$prevfile" ]; then
			if [ "$opt_whole" = "1" ]; then
				prevfile=/dev/null
			else
				echo -n "$progname: $src: Could not find " >&2
				echo "annex data for previous revision" >&2
				return 1
			fi
		fi
	fi

	rdiff -b $opt_block_size signature "$prevfile" \
	| rdiff delta - "$currfile" "$dest"
}

if [ -z "$2" ]; then
	echo "$progname: Need src and dest command line arguments" >&2
	exit 1
fi

create_rdiff "$1" "$2"

# vim: set ts=8 sw=8 sts=8 noet fo+=w tw=79 fenc=UTF-8 :
