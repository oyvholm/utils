#!/usr/bin/perl -w

#=======================================================================
# sortuuid
# File ID: d8ba490a-fa1c-11dd-827e-000475e441b9
# Sort lines based on first UUID found on each line.
#
# Character set: UTF-8
# ©opyleft 2009– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (

    'all' => 0,
    'debug' => 0,
    'help' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

Getopt::Long::Configure("bundling");
GetOptions(

    "all|a" => \$Opt{'all'},
    "debug" => \$Opt{'debug'},
    "help|h" => \$Opt{'help'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my $Lh = "[0-9a-fA-F]";
my $Templ = "$Lh\{8}-$Lh\{4}-$Lh\{4}-$Lh\{4}-$Lh\{12}";
my $v1_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\{12}";

my @uuid_lines = ();
my @other_lines = ();

while (my $Line = <>) {
    if ($Line =~ /^.*?($v1_templ)/) {
        push(@uuid_lines, $Line);
    } else {
        $Opt{'all'} && push(@other_lines, $Line);
    }
}

my @tmp_arr = ();
for my $Curr (@uuid_lines) {
    if ($Curr =~ /^.*?($v1_templ)/) {
        my $uuid = $1;
        push(@tmp_arr, uuid_hex_date($uuid) . "-$Curr");
    }
}
for my $Curr (sort @tmp_arr) {
    $Curr =~ s/^[0-9a-f]+-//;
    print($Curr);
}

$Opt{'all'} && print(join("", @other_lines));

sub uuid_hex_date {
    # {{{
    my $uuid = shift;
    my $time_low = lc(substr($uuid, 0, 8));
    my $time_mid = lc(substr($uuid, 9, 4));
    my $time_hi = lc(substr($uuid, 15, 3));
    # CO: Notes {{{
    # 2639d59e-fa20-11dd-8aa6-000475e441b9
    # 012345678901234567890123456789012345
    # 000000000011111111112222222222333333
    #
    # 2639d59e 0-3 time_low (0-7)
    # -
    # fa20 4-5 time_mid (9-12)
    # -
    # 11dd 6-7 time_hi_and_version (15-17)
    # -
    # 8a  8 clock_seq_hi_and_reserved (19-20)
    # a6  9 clock_seq_low (21-22)
    # -
    # 000475e441b9 10-15 node (24-35)
    # }}}
    my $Retval = "$time_hi$time_mid$time_low";
    D("uuid_hex_date('$uuid') returns '$Retval'");
    return($Retval);
    # }}}
} # uuid_hex_date()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] [file [files [...]]]

Sort lines based on the first time-based UUID on every line.

Options:

  -a, --all
    Print all lines, also those without a time-based UUID. They’re 
    listed unsorted after all the lines with time UUIDs.
  -h, --help
    Show this help.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
