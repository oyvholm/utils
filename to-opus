#!/usr/bin/env perl

#==============================================================================
# to-opus
# File ID: d4a9dfc6-3fd5-11e7-9638-f74d993421b0
#
# Convert .wav and .flac to .opus and place them under a destination directory 
# while keeping the original directory structure.
#
# Character set: UTF-8
# ©opyleft 2017– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of file for 
# legal stuff.
#==============================================================================

use strict;
use warnings;
use File::Basename;
use File::Path;
use Getopt::Long;

local $| = 1;

my $STD_DEST = 'opusfiles';

our %Opt = (

	'dest' => $STD_DEST,
	'dry-run' => 0,
	'help' => 0,
	'quiet' => 0,
	'verbose' => 0,
	'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

my $CMD_OPUSENC = 'opusenc';

Getopt::Long::Configure('bundling');
GetOptions(

	'dest|d=s' => \$Opt{'dest'},
	'dry-run|n' => \$Opt{'dry-run'},
	'help|h' => \$Opt{'help'},
	'quiet|q+' => \$Opt{'quiet'},
	'verbose|v+' => \$Opt{'verbose'},
	'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
	print_version();
	exit(0);
}

exit(main());

sub main {
	my $Retval = 0;
	my $dest = $Opt{'dest'};

	while (my $f = <>) {
		chomp($f);
		next if (!-f $f);
		convert_file($f, $dest);
	}

	return $Retval;
}

sub convert_file {
	my ($f, $dest) = @_;
	my $wav = '';
	my ($noext, $subdir, $base, $outfile);

	if ($f =~ /\.(wav|flac)$/i) {
		$wav = $f;
	} else {
		return 0;
	}
	msg(0, sprintf("Converting $f%s",
	               $Opt{'dry-run'} ? ' (simulating)' : ''));
	return 0 if ($Opt{'dry-run'});

	$noext = $f;
	$noext =~ s/(^.*)\.[^\.\/]+?$/$1/;
	$subdir = "$dest/$f";
	$subdir = dirname($subdir);
	$base = basename($noext);

	$outfile = "$subdir/$base.opus";

	if (!-e $subdir && !mkpath($subdir)) {
		warn("$progname: $subdir Could not create directory $!\n");
		return 1;
	}
	system($CMD_OPUSENC, $f, "$outfile.tmp") && check_sig($?);
	rename("$outfile.tmp", $outfile);

	return 0;
}

sub check_sig {
	my $retval = shift;

	if ($retval & 127) {
		warn("\n$progname: Child process interrupted, aborting.\n");
		exit(1);
	}

	return 0;
}

sub print_version {
	# Print program version
	print("$progname $VERSION\n");
	return;
}

sub usage {
	# Send the help message to stdout
	my $Retval = shift;

	if ($Opt{'verbose'}) {
		print("\n");
		print_version();
	}
	print(<<"END");

Convert .wav and .flac to .opus and place them under a destination 
directory while keeping the original directory structure.

Usage: $progname [options] [file [files [...]]]

Options:

  -d DIR, --dest DIR
    Store the generated files under directory tree DIR while keeping the 
    original directory structure relative to DIR.
    Default directory: "$STD_DEST"
  -h, --help
    Show this help.
  -n, --dry-run
    Don't do anything, only print what would happen.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
	exit($Retval);
}

sub msg {
	# Print a status message to stderr based on verbosity level
	my ($verbose_level, $Txt) = @_;

	if ($Opt{'verbose'} >= $verbose_level) {
		print(STDERR "$progname: $Txt\n");
	}
	return;
}

__END__

# This program is free software; you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation; either version 2 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with 
# this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set ts=8 sw=8 sts=8 noet fo+=w tw=79 fenc=UTF-8 :
