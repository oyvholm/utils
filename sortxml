#!/usr/bin/env perl

#=======================================================================
# sortxml
# File ID: 76c6f804-1463-11de-aecb-000475e441b9
#
# Sorts the X elements in an XML file.
#
# Character set: UTF-8
# ©opyleft 2009– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'help' => 0,
    'quiet' => 0,
    'reverse' => 0,
    'sort' => '',
    'unique' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'reverse|r' => \$Opt{'reverse'},
    'sort|s=s' => \$Opt{'sort'},
    'unique|u' => \$Opt{'unique'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main());

sub main {
    # {{{
    my $Retval = 0;

    my $sortele = $Opt{'sort'} || die("$progname: -s/--sort not defined\n");
    my $buf = '';
    my @Data = ();
    my %dupfree = ();

    while (my $Curr = <>) {
        if ($Curr =~ /<$sortele\b/) {
            $buf = $Curr;
            if ($Curr =~ /<\/$sortele>/) {
                $Opt{'unique'}
                    ? ($dupfree{$buf} = 1)
                    : push(@Data, $buf);
                $buf = "";
            }
            while ($Curr = <>) {
                $buf .= $Curr;
                if ($Curr =~ /<\/$sortele>/) {
                    $Opt{'unique'}
                        ? ($dupfree{$buf} = 1)
                        : push(@Data, $buf);
                    $buf = "";
                }
            }
            if ($Opt{'unique'}) {
                print($Opt{'reverse'}
                    ? reverse sort(keys %dupfree)
                    : sort(keys %dupfree));
            } else {
                print($Opt{'reverse'}
                    ? reverse sort(@Data)
                    : sort(@Data));
            }
            print($buf);
            last;
        } else {
            print($Curr);
        }
    }

    return($Retval);
    # }}}
} # main()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options] -s X [file [files [...]]]

Sorts the X elements in an XML file.

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -r, --reverse
    Sort in reverse order.
  -s X, --sort X
    Sort file using element X.
  -u, --unique
    Remove duplicated elements X.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
