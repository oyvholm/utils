#!/usr/bin/env perl

#=======================================================================
# sort-sqlite
# File ID: 0f3555b6-70fd-11e5-89be-fefdb24f8e10
#
# Sort the rows in an SQLite database.
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;
use File::Copy;
use IPC::Open3;

local $| = 1;

our %Opt = (

    'help' => 0,
    'quiet' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.2.0';

my $ERROR = 0;
my $OK = 1;

my $SQLITE = "sqlite3";

my @Columns = ();

Getopt::Long::Configure('bundling');
GetOptions(

    'column|c=s' => \@Columns,
    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my $sql_error = 0; # Is set to !0 if some sqlite3 error happened

exit(main());

sub main {
    if (!scalar(@Columns)) {
        warn("$progname: Missing -c/--column option\n");
        return 1;
    }
    $ENV{'LC_COLLATE'} = 'C';
    for my $file (@ARGV) {
        sort_file($file, @Columns) || return 1;
    }
    return 0;
} # main()

sub sort_file {
    # {{{
    my ($file, @tabcol) = @_;
    my $tmptable = "sortsqltmp";
    my $retval = $OK;
    my $c;

    for $c (@tabcol) {
        if ($c !~ /^(\S+?)\.(\S+)$/) {
            warn("$progname: \"$c\" is not a valid identifier\n");
            return $ERROR;
        }
    }

    if (!-r $file || !-f $file) {
        warn("$progname: $file: File is not readable by you or " .
             "is not a regular file\n");
        return $ERROR;
    }

    my $backup = sprintf("%s.%s.bck", $file, sec_to_string(mod_date($file)));
    if (!copy($file, $backup)) {
        warn("$progname: $backup: Cannot create backup file: $!\n");
        return $ERROR;
    }

    msg(1, "Sorting $file");
    for $c (@tabcol) {
        my ($table, $column);

        if ($c =~ /^(\S+?)\.(\S+)$/) {
            ($table, $column) = ($1, $2);
        } else {
            warn("$progname: This should not happen, invalid identifier " .
                 "\"$c\" even though it has been validated\n");
            return $ERROR;
        }
        sql($file, "
BEGIN EXCLUSIVE TRANSACTION;

CREATE TEMPORARY TABLE \"$tmptable\" AS
  SELECT * FROM \"$table\";
DELETE FROM \"$table\";
INSERT INTO \"$table\"
  SELECT * FROM \"$tmptable\" ORDER BY \"$column\";
DROP TABLE \"$tmptable\";

COMMIT TRANSACTION;
");
    }
    if ($sql_error) {
        warn("$progname: $file: $SQLITE error, aborting\n");
        return $ERROR;
    }

    return $OK;
    # }}}
} # sort_file()

sub mod_date {
    # Return file modification timestamp {{{
    my $File = shift;
    my $Retval = "";
    my @stat_array = stat($File);
    if (scalar(@stat_array)) {
        $Retval = $stat_array[9];
    } else {
        warn("$progname: $File: Cannot stat file: $!\n");
    }
    return $Retval;
    # }}}
} # mod_date()

sub sec_to_string {
    # Convert seconds since 1970 to "yyyymmddThhmmss[.frac]Z" {{{
    my ($Seconds, $Sep) = @_;
    length($Seconds) || return '';
    ($Seconds =~ /^-?(\d*)(\.\d+)?$/) || return undef;
    my $Secfrac = ($Seconds =~ /^([\-\d]*)(\.\d+)$/) ? 1.0*$2 : "";
    $Secfrac =~ s/^0//;

    defined($Sep) || ($Sep = " ");
    my @TA = gmtime($Seconds);
    my($DateString) = sprintf("%04u%02u%02uT%02u%02u%02u%sZ",
                              $TA[5]+1900, $TA[4]+1, $TA[3],
                              $TA[2], $TA[1], $TA[0], $Secfrac);
    return $DateString;
    # }}}
} # sec_to_string()

sub sql {
    # {{{
    my ($db, $sql) = @_;
    my @retval = ();

    msg(3, "sql(): db = '$db'");
    local(*CHLD_IN, *CHLD_OUT, *CHLD_ERR);

    my $pid = open3(*CHLD_IN, *CHLD_OUT, *CHLD_ERR, $SQLITE, $db) or (
        $sql_error = 1,
        msg(0, "sql(): open3() error: $!"),
        return "sql() error",
    );
    msg(3, "sql(): sql = '$sql'");
    print(CHLD_IN "$sql\n") or msg(0, "sql(): print CHLD_IN error: $!");
    close(CHLD_IN);
    @retval = <CHLD_OUT>;
    msg(3, "sql(): retval = '" . join('|', @retval) . "'");
    my @child_stderr = <CHLD_ERR>;
    if (scalar(@child_stderr)) {
        msg(0, "$SQLITE error: " . join('', @child_stderr));
        $sql_error = 1;
    }
    return join('', @retval);
    # }}}
} # sql()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Sort the rows in an SQLite database. A backup of the previous version is 
copied to a *.bck file containing the date of the file modification time 
in the file name.

Usage: $progname [options] SQLite_database_file [...]

Options:

  -c TABLE.COLUMN, --column TABLE.COLUMN
    Sort COLUMN in TABLE. This option can be repeated to sort several 
    columns.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
