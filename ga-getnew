#!/usr/bin/env bash

#=======================================================================
# ga-getnew
# File ID: 8af4d956-f358-11e4-b717-000df06acc56
#
# Get new files from the last month (can be overridden) that haven't got 
# enough copies in git-annex yet, then optionally execute a fast fsck to 
# check that the files have enough copies.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=ga-getnew
VERSION=0.7.0

ARGS="$(getopt -o "\
h\
q\
r\
s:\
v\
" -l "\
from:,\
fsck,\
help,\
quiet,\
resume,\
since:,\
verbose,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_from=''
opt_fsck=0
opt_help=0
opt_quiet=0
opt_resume=0
opt_since=1.month
opt_verbose=0
while :; do
    case "$1" in
        --from) opt_from="$2"; shift 2 ;;
        --fsck) opt_fsck=1; shift ;;
        -h|--help) opt_help=1; shift ;;
        -q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        -r|--resume) opt_resume=1; shift ;;
        -s|--since) opt_since="$2"; shift 2 ;;
        -v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        --version) echo $progname $VERSION; exit 0 ;;
        --) shift; break ;;
        *) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

var_disable=ga-getnew.disable

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Get new files from the last month (can be overridden) that haven't got 
enough copies in git-annex yet, then optionally execute a fast fsck to 
check that the files have enough copies.

Arguments and options after " -- " are delivered to git-allfiles(1) 
which delivers them further to "git log".

Usage: $progname [options] [ -- options_to_git-allfiles ]

Options:

  --from REMOTE
    Get new files from Git remote REMOTE.
  --fsck
    Execute "ga fsck" after the files are copied.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -r, --resume
    Don't execute an initial "ga sync", resume an earlier interrupted 
    session.
  -s TIMESPAN, --since TIMESPAN
    Get new files since TIMESPAN, same syntax as --since in "git log".
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

If the Git option $var_disable is set to a non-empty value in a repo, 
the repo is skipped. For example:

  git config $var_disable 1

END
    exit 0
fi

msg() {
    echo
    echo ==== $progname: $*
}

if test -n "$(git config --get $var_disable)"; then
    echo $progname: $var_disable is set, skipping repo
    exit 0
fi

toplevel="$(git rev-parse --show-toplevel)"
cd "$toplevel" || {
    echo $progname: $toplevel: Cannot chdir to top of repo >&2
    exit 1
}

if test "$opt_resume" != "1"; then
    # Using backslash before { and } to suppress folding when editing this 
    # file.
    msg ga sync \{\{\{
    ga sync 2>&1
    echo $progname: ga sync \}\}\}
fi

if test -n "$opt_from"; then
    from_str=" --from=$opt_from"
else
    from_str=''
fi

msg git allfiles --since=$opt_since $*
msg ga get --auto$from_str
git allfiles --since=$opt_since "$@" |
    strip-nonexisting |
    xargs -d \\n --no-run-if-empty ga get --auto$from_str

if test "$opt_fsck" = "1"; then
    msg ga fsck --fast --quiet
    git allfiles --since=$opt_since "$@" |
        strip-nonexisting |
        xargs -d \\n --no-run-if-empty ga fsck --fast --quiet
fi

msg ga sync \{\{\{
ga sync 2>&1
echo $progname: ga sync \}\}\}
