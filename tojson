#!/usr/bin/perl

#=======================================================================
# tojson
# File ID: 86075cf2-b00c-11e2-a409-0016d364066c
# [Description]
#
# Character set: UTF-8
# ©opyleft 2013– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our $Debug = 0;

our %Opt = (

    'debug' => 0,
    'help' => 0,
    'line' => 0,
    'reverse' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.00';

Getopt::Long::Configure('bundling');
GetOptions(

    'debug' => \$Opt{'debug'},
    'help|h' => \$Opt{'help'},
    'line|l' => \$Opt{'line'},
    'reverse|r' => \$Opt{'reverse'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main(%Opt));

sub main {
    # {{{
    my %Opt = @_;
    my $Retval = 0;

    if ($Opt{'reverse'}) {
        while (my $curr = <>) {
            chomp($curr);
            if ($curr =~ /"/) {
                msg(2, "curr bef: '$curr'");
                $curr =~ s/^.*?"(.*)".*?$/json_to_txt($1)/e;
                msg(2, "curr aft: '$curr'");
                print($curr);
            }
        }
    } else {
        if ($Opt{'line'}) {
            print("[\n  \"");
            my $print_comma = 0;
            while (<>) {
                $print_comma && print("\",\n  \"") || ($print_comma = 1);
                print(txt_to_json($_));
            }
            print("\"\n]\n");
        } else {
            print('"');
            while (<>) {
                print(txt_to_json($_));
            }
            print('"');
        }
    }
    return($Retval);
    # }}}
} # main()

sub txt_to_json {
    # Convert plain text to JSON {{{
    my $Txt = shift;
    $Txt =~ s/\\/\\\\/gs;
    $Txt =~ s/"/\\"/gs;
    $Txt =~ s/\x08/\\b/gs;
    $Txt =~ s/\x09/\\t/gs;
    $Txt =~ s/\x0a/\\n/gs;
    $Txt =~ s/\x0c/\\f/gs;
    $Txt =~ s/\x0d/\\r/gs;
    $Txt =~ s/([\x00-\x1f])/sprintf('\u%04X', ord($1))/gse;
    return($Txt);
    # }}}
} # txt_to_json()

sub json_to_txt {
    # Convert JSON back to plain text {{{
    my $Txt = shift;
    $Txt =~ s/\\\\/\\/gs;
    $Txt =~ s/\\r/\x0d/gs;
    $Txt =~ s/\\f/\x0c/gs;
    $Txt =~ s/\\n/\x0a/gs;
    $Txt =~ s/\\t/\x09/gs;
    $Txt =~ s/\\b/\x08/gs;
    $Txt =~ s/\\"/"/gs;
    # $Txt =~ s/([\x00-\x1f])/sprintf('\u%04X', ord($1))/gse;
    return($Txt);
    # }}}
} # json_to_txt()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Escape plain text for use in JSON.

Usage: $progname [options] [file [files [...]]]

Options:

  -h, --help
    Show this help.
  -l, --line
    Convert input to a JSON array containing all lines.
  -r, --reverse
    Convert from JSON to text.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return('');
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
