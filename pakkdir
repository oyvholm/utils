#!/bin/bash

#=======================================================================
# pakkdir
# File ID: 5818b856-0ba9-11de-b2c1-000475e441b9
#
# Move a whole subdirectory tree into a single .pakka.tar.gz file.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=pakkdir
VERSION=0.10.1

ARGS="$(getopt -o "\
1\
h\
q\
r\
s:\
v\
x\
z\
" -l "\
help,\
quiet,\
remove-files,\
split:,\
verbose,\
version,\
xz,\
gzip,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_1=0
opt_help=0
opt_quiet=0
opt_remove_files=0
opt_split=''
opt_verbose=0
opt_xz=0
opt_gzip=0
while :; do
    case "$1" in
        (-1) opt_1=1; shift ;;
        (-h|--help) opt_help=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-r|--remove-files) opt_remove_files=1; shift ;;
        (-s|--split) opt_split="$2"; shift 2 ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (-x|--xz) opt_xz=1; shift ;;
        (-z|--gzip) opt_gzip=1; shift ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Move a whole subdirectory tree into a single .pakka.tar.gz file.

Usage: $progname [options] DIRECTORY [DIRECTORIES [...]]

Options:

  -1
    Alias for "--split 1GB". No file systems should have problems with 
    this size, and it makes it easy to calculate the size of the .tar 
    file.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -r, --remove-files
    Remove files in DIRECTORY immediately after they've been added to 
    the archive. Can be used when there's not enough disk space for the 
    archive.
  -s SIZE, --split SIZE
    Split the .tar file into files with SIZE bytes each. Allowed values 
    are those understood by the -b/--bytes option in split(1). These 
    files are not compressed by default, to make it easier to extract 
    data from the files without starting from the beginning.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  -x, --xz
    Compress the archives with xz(1) after the files are added.
  -z, --gzip
    Compress the archives with gzip(1) after the files are added.

To protect against potential data loss, it first loops through all 
directories to check that no files under the directories are stored in a 
parent Git repository. If any files are stored under any of the 
directories, it aborts. This is useful for example with git-annex, where 
only a symlink would be stored in the archive files.

END
    exit 0
fi

if test "$opt_xz" = "1" -a "$opt_gzip" = "1"; then
    echo $progname: Cannot mix the --gzip and --xz options >&2
    exit 1
fi

if test "$opt_1" = "1" -a -n "$opt_split"; then
    echo $progname: Cannot mix the -1 and --split options >&2
    exit 1
fi

test "$opt_1" = "1" && opt_split=1GB

if test "$opt_remove_files" = "1"; then
    rm_files_str="--remove-files"
else
    rm_files_str=""
fi

for f in "$@"; do
    if test -d "$f"; then
        git ls-files "$f" | grep . >&2 && {
            echo $progname: $f: \
                Files are stored in Git below this directory >&2
            exit 1
        }
    else
        echo $progname: $f: Not a directory >&2
    fi
done

for f in "$@"; do
    echo >&2
    echo $progname: Packing $f... >&2

    dir="$f"
    tarfile="$f.pakka.tar"

    if test $opt_verbose -ge 2; then
        echo $progname: dir = $dir >&2
    fi

    if ls "$tarfile"* 2>/dev/null | grep -q .; then
        echo "$progname: $tarfile* already exist" >&2
        exit 1
    fi

    if [ -d "$dir" ]; then
        echo "$dir" | grep -q / && {
            echo "$progname: $dir: Slashes not allowed in the file name" >&2
            exit 1
        }

        uuid=$(
            suuid -t pakkdir --raw -w eo \
                -c "<c_pakkdir> <filename>$tarfile</filename> <host>$(
                    hostname
                )</host> <directory>$(/bin/pwd)</directory> </c_pakkdir>"
        ) || {
            echo $progname: suuid error >&2
            exit 1
        }
        if test -n "$opt_split"; then
            echo $progname: tar c $rm_files_str $dir \| \
                split -b $opt_split --verbose - $tarfile.split_ >&2
            tar c $rm_files_str "$dir" |
                split -b $opt_split --verbose - "$tarfile.split_"
            if test ! -e "$tarfile.split_ab"; then
                mv -vi "$tarfile.split_aa" "$tarfile"
            fi
            test "$opt_xz" = "1" && xz -v "$tarfile"*
            test "$opt_gzip" = "1" && gzip -v "$tarfile"*
        else
            echo $progname: tar cf $tarfile $rm_files_str $dir >&2
            tar cf "$tarfile" $rm_files_str --label=$uuid "$dir"
            ls -la "$tarfile" >&2
            test "$opt_xz" = "1" && xz -v "$tarfile"
            test "$opt_gzip" = "1" && gzip -v "$tarfile"
        fi
        # echo $progname: Rensk >&2
        # (cd "$dir" && find -type d -print0 -depth | xargs -0 rmdir )
        # echo $progname: rmdir $dir >&2
        # rmdir "$dir"
    fi
done
