#!/usr/bin/perl -w

#=======================================================================
# create_svn
# File ID: 8cc27860-f742-11dd-82e0-000475e441b9
# Configures, compiles and installs new groovy Subversion from the 
# repository at svn.collab.net .
#
# Character set: UTF-8
# ©opyleft 2004- Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (

    'debug' => 0,
    'help' => 0,
    'verbose' => 0,
    'version' => 0,

);

die("Unfinished.\n");

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

my $svn_base = "$ENV{HOME}/src/other/subversion";
my $svn_clean = "$ENV{HOME}/src/other/subversioni/1.1.x.clean";

Getopt::Long::Configure("bundling");
GetOptions(

    "debug" => \$Opt{'debug'},
    "help|h" => \$Opt{'help'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

unless (chdir($svn_clean)) {
    warn("$svn_clean: Directory not found, installing newest svn-1.x.x .\n");
    mkpath($svn_base, 1);
    unless (chdir($svn_base)) {
        die("chdir($svn_base): $!");
    }
    my_system("svn co http://svn.collab.net/repos/svn/branches/1.1.x 1.1.x.clean");
}

unless (chdir($svn_clean)) {
    die("chdir($svn_clean): $!");
}

my_system("svn up");

my $Revnum = "";

if (open(PipeFP, "svn info|")) {
    while(<PipeFP>) {
        # FIXME: Pussyble i18n stuff fucking up grepping here
        if (/^Revision: (\d+)$/) {
            $Revnum = $1;
            last;
        }
    }
    length($Revnum) || die("$svn_clean: Revision number not found in directory: $!");
}

my $dest_dir = "$svn_base/subversion-1.1.x.r$Revnum";


sub ERR {
    my $Cmd = shift;
    print("== Running \"$Cmd\"...\n");
    return($Cmd || die("$Cmd: $!"));
}

sub my_system {
    my $Cmd = shift;
    print("==== Executing system(\"$Cmd\")...\n");
    return(system($Cmd));
}

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] [file [files [...]]]

Options:

  -h, --help
    Show this help.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
