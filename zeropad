#!/usr/bin/env perl

#=======================================================================
# zeropad
# File ID: 7028de4a-f744-11dd-a3ac-000475e441b9
#
# Pads all integers read from stdin with zeros so they all have the same 
# length.
#
# Character set: UTF-8
# ©opyleft 2008– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'help' => 0,
    'hex' => 0,
    'quiet' => 0,
    'size' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.1';

Getopt::Long::Configure('bundling');
GetOptions(

    'help|h' => \$Opt{'help'},
    'hex|x' => \$Opt{'hex'},
    'quiet|q+' => \$Opt{'quiet'},
    'size|s=i' => \$Opt{'size'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my $max_length = 0;

exit(main());

sub main {
    # {{{
    my $Retval = 0;

    my @Array = ();

    my $DIGITS = $Opt{'hex'} ? '0-9A-Fa-f' : '0-9';

    while (<>) {
        my $Line = $_;
        push(@Array, $Line);
        $Line =~ s/([$DIGITS]+)/check_max($1)/ge;
    }

    for my $Curr (@Array) {
        $Curr =~ s/([$DIGITS]+)/pad_number($1)/ge;
        print($Curr);
    }

    return $Retval;
    # }}}
} # main()

sub check_max {
    # {{{
    my $Str = shift;
    if (length($Str) > $max_length) {
        $max_length = $Opt{'size'} ? $Opt{'size'} : length($Str);
    }
    return("");
    # }}}
} # check_max()

sub pad_number {
    # {{{
    my $Num = shift;
    return $Num if ($max_length <= length($Num));
    return('0' x ($max_length - length($Num)) . $Num);
    # }}}
} # pad_number()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options] [file [files [...]]]

Pads all integers read from stdin with zeros so they all have the same 
length. I.e.: 1 5 12 156 1024 = 0001 0005 0012 0156 1024.

Options:

  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -s X, --size X
    Instead of padding to the size of the largest number, pad to a width 
    of X digits.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  -x, --hex
    Include hexadecimal digits a-f and A-F.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
