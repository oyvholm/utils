#!/usr/bin/env perl

#=======================================================================
# git-reach-commit
# File ID: dc91cf88-abf1-11e5-bfdc-fefdb24f8e10
#
# Estimate when a project in Git will reach a certain number of commits.
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'goal' => '',
    'help' => 0,
    'quiet' => 0,
    'ref' => '',
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'goal|g=i' => \$Opt{'goal'},
    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'ref|r=s' => \$Opt{'ref'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main());

sub main {
    # {{{
    my $Retval = 0;

    if (!length($Opt{'goal'})) {
        warn("$progname: -g/--goal not specified\n");
        return(1);
    }

    if (!length($Opt{'ref'})) {
        warn("$progname: -r/--ref not specified\n");
        return(1);
    }

    chomp(my $begindate = `git log -1 $Opt{'ref'} --format=%ct`);
    msg(2, "begindate = \"$begindate\"");
    chomp(my $beginvalue = `git sht $Opt{'ref'} | wc -l`);
    msg(2, "beginvalue = \"$beginvalue\"");
    chomp(my $currentvalue = `git sht | wc -l`);

    system(
        "goal",
        sec_to_string($begindate, " "),
        $beginvalue,
        $Opt{'goal'},
        $currentvalue,
    );

    return($Retval);
    # }}}
} # main()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub sec_to_string {
    # Convert seconds since 1970 to "yyyymmddThhmmss[.frac]Z" {{{
    my ($Seconds, $Sep) = @_;
    length($Seconds) || return('');
    ($Seconds =~ /^-?(\d*)(\.\d+)?$/) || return(undef);
    my $Secfrac = ($Seconds =~ /^([\-\d]*)(\.\d+)$/) ? 1.0*$2 : "";
    $Secfrac =~ s/^0//;

    defined($Sep) || ($Sep = " ");
    my @TA = gmtime($Seconds);
    my($DateString) = sprintf("%04u-%02u-%02u %02u:%02u:%02u",
                              $TA[5]+1900, $TA[4]+1, $TA[3],
                              $TA[2], $TA[1], $TA[0]);
    return($DateString);
    # }}}
} # sec_to_string()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Estimate when a project in Git will reach a certain number of commits.

Usage: $progname [options] -r REF -g GOAL

Options:

  -g NUM, --goal NUM
    Estimate when the repository will reach NUM commits.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -r REF, --ref REF
    Commit or tag to use as start value.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
