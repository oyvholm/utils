#!/bin/bash

#=======================================================================
# git-delrembr
# File ID: bb8f9564-dfd3-11e2-b044-0800274013ad
#
# Delete the specified Git branches or tags locally and from all remotes
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=git-delrembr
VERSION=0.4.0

ARGS="$(getopt -o "\
h\
n\
q\
v\
" -l "\
dry-run,\
help,\
quiet,\
verbose,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_dry_run=0
opt_quiet=0
opt_verbose=0
while :; do
    case "$1" in
        (-h|--help) opt_help=1; shift ;;
        (-n|--dry-run) opt_dry_run=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Delete the specified Git branches or tags locally and from all remotes

Usage: $progname [options] ref [...]

Options:

  -h, --help
    Show this help.
  -n, --dry-run
    Don't delete anything, only print out what would be done.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

if test "$opt_dry_run" = "1"; then
    sim=echo
else
    sim=
fi

msg() {
    if test $opt_verbose -ge $1; then
        shift
        echo "$progname: $*" >&2
    fi
}

branches="$@"
remotes="$(git remote)"
for b in $branches; do
    echo ==== $progname: branch \"$b\" ====
    git branch | grep -q "^  $b\$" && {
        msg 1 Executing $sim git branch -D $b
        $sim git branch -D $b
    }
    for r in $remotes; do
        git branch -a | grep -q "^  remotes/$r/$b\$" && {
            msg 1 Executing $sim git push $r :$b
            $sim git push $r :$b
        }
    done
done
