diff --git a/src/tools/version_stamp.pl b/src/tools/version_stamp.pl
index 6be1ac0..b0a5af0 100755
--- a/src/tools/version_stamp.pl
+++ b/src/tools/version_stamp.pl
@@ -17,7 +17,7 @@
 # Usage: cd to top of source tree and issue
 #	src/tools/version_stamp.pl MINORVERSION
 # where MINORVERSION can be a minor release number (0, 1, etc), or
-# "devel", "alphaN", "betaN", "rcN".
+# "devel", "git", "alphaN", "betaN", "rcN".
 #
 
 # Major version is hard-wired into the script.  We update it when we branch
@@ -39,6 +39,30 @@ elsif ($minor eq "devel")
 	$dotneeded    = 0;
 	$numericminor = 0;
 }
+elsif ($minor eq "git")
+{
+	# Add Git commit info to the end of the current version string
+	$currminor = get_minor_version(get_current_version());
+	if ($currminor =~ /^\./) # Does the minor version start with a dot?
+	{
+		$dotneeded = 1;
+		$currminor =~ s/^\.//;
+	}
+	else
+	{
+		$dotneeded = 0;
+	}
+	if ($currminor =~ /^(\d+)$/) # Does the minor version contain digits only?
+	{
+		$numericminor = $1;
+	}
+	else
+	{
+		$numericminor = 0;
+	}
+	$minor = $currminor;
+	$add_git_info = 1;
+}
 elsif ($minor =~ m/^alpha\d+$/)
 {
 	$dotneeded    = 0;
@@ -56,7 +80,7 @@ elsif ($minor =~ m/^rc\d+$/)
 }
 else
 {
-	die "$0: minor-version must be N, devel, alphaN, betaN, or rcN\n";
+	die "$0: minor-version must be N, devel, git, alphaN, betaN, or rcN\n";
 }
 
 # Create various required forms of the version number
@@ -94,6 +118,15 @@ $aconfver ne ""
 
 $fixedfiles = "";
 
+# If 'git' is specified on the command line, add Git commit information
+# to the end of the current version string
+
+if (defined($add_git_info))
+{
+	$fullversion .= '+' . `git describe --tags --long`;
+	$fullversion =~ s/\s+$//;
+}
+
 sed_file("configure.in",
 "-e 's/AC_INIT(\\[PostgreSQL\\], \\[[0-9a-z.]*\\]/AC_INIT([PostgreSQL], [$fullversion]/'"
 );
@@ -138,3 +171,31 @@ sub sed_file
 
 	$fixedfiles .= "\t$filename\n";
 }
+
+# Extract current version from configure.in
+sub get_current_version
+{
+	my $retval = '';
+	open(my $fh, "configure.in")
+	  or die("could not open configure.in: $!\n");
+	while (<$fh>) {
+		if (/AC_INIT\(\[PostgreSQL\], \[(\S+?)\]/)
+		{
+			$retval = $1;
+			last;
+		}
+	}
+	close($fh);
+	if (!length($retval)) {
+		die("could not extract version information from configure.in\n");
+	}
+	return($retval);
+}
+
+# Extract minor version from version string
+sub get_minor_version
+{
+	my $currversion = shift;
+	$currversion =~ s/^\d+\.\d+//;
+	return($currversion);
+}
