#!/bin/bash

#=======================================================================
# filesynced
# File ID: 25796c28-7205-11e5-b257-fefdb24f8e10
#
# Add 'synced'-entry into synced.sqlite for files.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=filesynced
VERSION=0.1.0

ARGS="$(getopt -o "hlqv" -l "help,list,quiet,verbose,version" \
    -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_quiet=0
opt_verbose=0
while :; do
    case "$1" in
        (-h|--help) opt_help=1; shift ;;
        (-l|--list) opt_list=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Add 'synced'-entry into synced.sqlite for files. Updates synced.rev and 
synced.date with Git commit info.

Usage: $progname [options] commit file [file [...]]
       $progname -l

Options:

  -h, --help
    Show this help.
  -l, --list
    Create a file list sorted by how many revisions they are behind the 
    files in Lib/std/ in current HEAD.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

SQLITE=sqlite3
db="synced.sqlite"

if test "$opt_list" = "1"; then
    head=$(git rev-parse HEAD)
    cat <<END | $SQLITE "$db" | bash | sort -n
SELECT
  'echo \$(git log --format=%h ' || rev || '..$head '
  || orig || ' | wc -l) ' || file || ';'
FROM synced
WHERE
  orig LIKE 'Lib/std/%'
  AND
  rev IS NOT NULL;
END
    exit
fi

commit="$(git rev-parse $1)"
if test -z "$commit"; then
    echo $progname: $1: Invalid Git ref
    exit 1
fi
shift
files="$*"
if test -z "$files"; then
    echo $progname: No files specified >&2
    exit 1
fi
date="$(
    git log -1 --format=%ad --date=raw $commit |
    cut -f 1 -d ' ' |
    ep -D ' ' |
    tr -d Z
)"

test -f "$db" || {
    echo $progname: $db: File not found >&2
    exit 1
}

for f in $files; do
    if test -z "$(git ls-files "$f")"; then
        echo $progname: $f: File is not in Git, no entries updated
        exit 1
    fi
done

(
    echo BEGIN\;
    for f in $files; do
        echo "UPDATE synced SET rev = '$commit', date = '$date' WHERE file = '$f';"
    done
    echo COMMIT\;
) | $SQLITE "$db"
