#!/bin/bash

#=======================================================================
# filesynced
# File ID: 25796c28-7205-11e5-b257-fefdb24f8e10
#
# Add 'synced'-entry into synced.sqlite for files.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=filesynced
VERSION=0.3.0

ARGS="$(getopt -o "hlqt:v" -l "help,list,quiet,random,type:,verbose,version" \
    -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_list=0
opt_quiet=0
opt_random=0
opt_type='%'
opt_verbose=0
while :; do
    case "$1" in
        (-h|--help) opt_help=1; shift ;;
        (-l|--list) opt_list=1; shift ;;
        (-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        (--random) opt_random=1; shift ;;
        (-t|--type) opt_type=$2; shift 2 ;;
        (-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        (--version) echo $progname $VERSION; exit 0 ;;
        (--) shift; break ;;
        (*) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

Add 'synced'-entry into synced.sqlite for files. Updates synced.rev and 
synced.date with Git commit info.

Usage: $progname [options] commit file [file [...]]
       $progname -l [-t TYPE]

Options:

  -h, --help
    Show this help.
  -l, --list
    Create a file list sorted by how many revisions they are behind the 
    files in Lib/std/ in current HEAD.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  --random
    Pick a random file from the todo list and sync it using "vd".
  -t FILETYPE. --type FILETYPE
    Limit list to files of type FILETYPE, for example "bash" or 
    "perl-tests". SQL LIKE wildcards can be used, like '%' and '_'.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit 0
fi

SQLITE=sqlite3
bin="$HOME/bin"
db="synced.sqlite"

if test ! -f "$bin/$db"; then
    echo $progname: $bin/$db: Sync database not found >&2
    exit 1
fi
(
    cd "$bin" || {
        echo $progname: Cannot chdir to \'$bin\' >&2
        exit 1
    }
)

if test "$opt_list" = "1"; then
    test -n "$opt_type" && type_str="$opt_type" || type_str="%"
    cat <<END | $SQLITE "$db" | bash | sort -n
SELECT
  'echo \$(' ||
    'cd "$bin"; git log --format=%h ' || rev || '.. ' || orig || ' | wc -l' ||
  ') ' ||
  file ||
  ' "(' ||
    '\$(cd "$bin"; git log -1 --format=%h ' || rev || ')' ||
    '.. ' ||
    orig ||
  ')";'
FROM synced
WHERE
  orig LIKE 'Lib/std/$type_str'
  AND
  rev IS NOT NULL;
END
    exit
fi

if test "$opt_random" = "1"; then
    if test ! -f "$db"; then
        echo $progname: $db: Sync database not found in current directory >&2
        exit 1
    fi
    file="$(
        sqlite3 "$db" "
SELECT file FROM todo
  ORDER BY pri, random()
  LIMIT 1;
        "
    )"
    if test -z "$file"; then
        echo $progname: No files to edit >&2
        exit 0
    fi
    vd "$file" "$HOME/bin/$(
        sqlite3 synced.sqlite "
SELECT orig FROM synced
  WHERE file = '$file';
        "
    )"
    exit
fi

commit="$(cd "$bin"; git rev-parse $1)"
if test -z "$commit"; then
    echo $progname: $1: Invalid Git ref
    exit 1
fi
shift
files="$*"
if test -z "$files"; then
    echo $progname: No files specified >&2
    exit 1
fi
date="$(
    cd "$bin"
    git log -1 --format=%cd --date=raw $commit |
    cut -f 1 -d ' ' |
    ep -D ' ' |
    tr -d Z
)"

test -f "$db" || {
    echo $progname: $db: File not found >&2
    exit 1
}

for f in $files; do
    if test -z "$(git ls-files "$f")"; then
        echo $progname: $f: File is not in Git, no entries updated
        exit 1
    fi
done

(
    echo BEGIN\;
    for f in $files; do
        cat <<END
UPDATE synced
  SET rev = '$commit', date = '$date'
  WHERE file = '$f';
DELETE FROM todo
  WHERE file = '$f';
END
    done
    echo COMMIT\;
) | $SQLITE "$db"
