#!/usr/bin/env perl

#==============================================================================
# wav_to_flac
# File ID: 4507db62-f744-11dd-bbaa-000475e441b9
#
# [Description]
#
# Character set: UTF-8
# ©opyleft 2008– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of file for 
# legal stuff.
#==============================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

	'album' => "",
	'artist' => "",
	'force' => 0,
	'genre' => "",
	'help' => 0,
	'quiet' => 0,
	'releasedate' => "",
	'title' => "",
	'tracknumber' => "",
	'verbose' => 0,
	'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

Getopt::Long::Configure('bundling');
GetOptions(

	'album|a=s' => \$Opt{'album'},
	'artist|A=s' => \$Opt{'artist'},
	'force|f' => \$Opt{'force'},
	'genre|g=s' => \$Opt{'genre'},
	'help|h' => \$Opt{'help'},
	'quiet|q+' => \$Opt{'quiet'},
	'releasedate|r=s' => \$Opt{'releasedate'},
	'title|t=s' => \$Opt{'title'},
	'tracknumber|n=s' => \$Opt{'tracknumber'},
	'verbose|v+' => \$Opt{'verbose'},
	'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
	print_version();
	exit(0);
}

exit(main());

sub main {
	my $Retval = 0;

	my $Lh = "[0-9a-fA-F]";
	my $v1_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\{12}";

	my $wav_file;

	if (defined($ARGV[0])) {
		$wav_file = $ARGV[0];
	} else {
		die("$progname: No .wav file specified\n");
	}

	(!-r $wav_file) &&
		die("$progname: $wav_file: Cannot read file: $!\n");

	(-d $wav_file) &&
		die("$progname: $wav_file: Is a directory\n");

	my $out_file = $wav_file;
	$out_file =~ s/^(.*)\.wav$/$1.flac/i;

	if (-e $out_file) {
		if ($Opt{'force'}) {
			unlink($out_file) || die("$progname: $out_file: " .
			                         "Cannot delete file: $!\n");
		} else {
			die("$progname: $out_file: File already exists, " .
			    "use -f / --force to overwrite\n");
		}
	}

	my $flac_version = `flac --version`;
	$flac_version =~ s/^\s+//;
	$flac_version =~ s/\s+$//;

	my @Params = "flac";

	length($Opt{'album'}) &&
		push(@Params, tag_string("ALBUM", $Opt{'album'}));
	length($Opt{'artist'}) &&
		push(@Params, tag_string("ARTIST", $Opt{'artist'}));

	my $esc_wav_file = shell_escape($wav_file);
	my $suuid_cmd = "suuid -m -t encode -w eo " .
	                "-c \"$progname $esc_wav_file - $flac_version\"";
	chomp(my $suuid_str = `$suuid_cmd`);
	if (!defined($suuid_str) || $suuid_str !~ /^$v1_templ$/) {
		die("$progname: suuid error\n");
	}
	push(@Params, "-TENC_ID=$suuid_str");
	push(@Params, "-TENCODED_WITH=$flac_version");

	length($Opt{'genre'}) &&
		push(@Params, tag_string("GENRE", $Opt{'genre'}));
	length($Opt{'releasedate'}) &&
		push(@Params, tag_string("RELEASEDATE", $Opt{'releasedate'}));
	length($Opt{'title'}) &&
		push(@Params, tag_string("TITLE", $Opt{'title'}));
	length($Opt{'tracknumber'}) &&
		push(@Params, tag_string("TRACKNUMBER", $Opt{'tracknumber'}));

	push(@Params, sprintf("%s", $wav_file));

	msg(1, join(" ", @Params));
	system(@Params);

	return $Retval;
}


sub tag_string {
	# Return parameter for use with flac(1)
	my ($Label, $Val) = @_;
	my $Retval = "-T$Label=$Val";
	return($Retval);
}

sub shell_escape {
	my $Txt = shift;
	$Txt =~ s/"/\\"/g;
	$Txt =~ s/\$/\\\$/g;
	$Txt =~ s/!/\\!/g;
	$Txt =~ s/`/\\`/g;
	return($Txt);
}

sub print_version {
	# Print program version
	print("$progname $VERSION\n");
	return;
}

sub usage {
	# Send the help message to stdout
	my $Retval = shift;

	if ($Opt{'verbose'}) {
		print("\n");
		print_version();
	}
	print(<<"END");

Usage: $progname [options] wav_file

Convert .wav to .flac .

Options:

  -a X, --album X
    Name of music album.
  -A X, --artist X
    Name of artist/group.
  -f, --force
    Overwrite existing files.
  -g X, --genre X
    Music genre.
  -h, --help
    Show this help.
  -n X, --tracknumber X
    Track number of this song.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -r X, --releasedate X
    The date the album was released.
  -t X, --title X
    Title of song.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
	exit($Retval);
}

sub msg {
	# Print a status message to stderr based on verbosity level
	my ($verbose_level, $Txt) = @_;

	if ($Opt{'verbose'} >= $verbose_level) {
		print(STDERR "$progname: $Txt\n");
	}
	return;
}

__END__

# This program is free software; you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation; either version 2 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with 
# this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set ts=8 sw=8 sts=8 noet fo+=w tw=79 fenc=UTF-8 :
