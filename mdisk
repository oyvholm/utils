#!/bin/sh

#==============================================================================
# mdisk
# File ID: 0548a2d2-ea04-11ed-b5e0-83850402c3ce
#
# Mount a LUKS-encrypted disk under /media/
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#==============================================================================

progname=mdisk
VERSION=0.2.4

opt_help=0
opt_quiet=0
opt_umount=0
opt_verbose=0
while test -n "$1"; do
	case "$1" in
	-a|--all) opt_all=1; shift ;;
	-h|--help) opt_help=1; shift ;;
	-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
	-u|--umount) opt_umount=1; shift ;;
	-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
	--version) echo $progname $VERSION; exit 0 ;;
	--) shift; break ;;
	*)
		if printf '%s\n' "$1" | grep -q ^-; then
			echo "$progname: $1: Unknown option" >&2
			exit 1
		else
			break
		fi
	break ;;
	esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

[ -e "$HOME/.mdiskrc" ] && . "$HOME/.mdiskrc"

T_BOLD=$(tput bold)
T_GREEN=$(tput setaf 2)
T_RED=$(tput setaf 1)
T_RESET=$(tput sgr0)

if test "$opt_help" = "1"; then
	test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
	cat <<END

Mount a LUKS-encrypted disk under /media/.

Usage: $progname [options] DISKNAME

Options:

  -a, --all
    Loop through all directory names under /media/ and mount or unmount 
    all corresponding disks.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  -u, --umount
    Unmount the disk.
  --version
    Print version information.

Environment variables

  MDISK_KEY_FILE
    Full path to text file with passphrase for encrypted drives.

Files and directories

  \$HOME/.mdiskrc
    Init file. A regular shell script that can be used to initialize 
    environment variables and run commands before normal program 
    execution.
  .dontsleep/
    If this directory exists at the top of the disk, the disk is 
    prevented from sleeping. When a disk with this directory is mounted, 
    a background process is started that writes 512 random bytes to a 
    file in this directory every two minutes. The current user must have 
    write permission in this directory, otherwise sleeping is not 
    prevented. When the disk is unmounted with -u/--umount, the process 
    is killed.

END
	exit 0
fi

msg() {
	test $1 -gt $opt_verbose && return;
	shift
	echo "$progname: $*" >&2
}

err() {
	echo "$progname: $T_BOLD$T_RED$*$T_RESET" >&2
	exit 1
}

is_active() {
	sudo cryptsetup status $disk | grep -q "/dev/mapper/$disk is active"
}

is_in_blkid() {
	sudo blkid | grep -q "LABEL=\"$1\"" && return 0
	return 1
}

is_mounted() {
	df | grep -q "/media/$disk\$" && return 0
	return 1
}

strip_diskname() {
	echo $(echo "$1" | sed 's.^/media/..; s./$..')
}

create_ds_script() {
	echo >$ds_script || err $ds_dir/: Cannot write to directory, \
	                        disk sleep is not prevented
	cat <<'END' >$ds_script
#!/bin/sh

T_BOLD=$(tput bold)
T_RED=$(tput setaf 1)
T_RESET=$(tput sgr0)
outfile=.dontsleep.bin

rm -f $outfile
echo $$ >pid || {
	echo -n "$T_BOLD$T_RED$0: Cannot write pid file to $ds_dir," >&2
	echo " unable to prevent sleep$T_RESET" >&2
	exit 1
}
while :; do
	head -c 512 /dev/urandom >>$outfile
	(cd; sleep 120)
done
END
}

prevent_sleep() {
	local disk=$1

	msg 0 Preventing $disk from sleeping
	cd "$ds_dir" || err $ds_dir: chdir error
	(create_ds_script && sh $ds_script $disk) &
}

kill_prevent() {
	local disk=$1

	pidfile="$ds_dir/pid"
	if [ ! -f "$pidfile" ]; then
		echo $progname: PID file $pidfile not found >&2
		return
	fi
	kill $(cat $pidfile)
	rm $pidfile
}

if [ "$opt_all" = "1" ]; then
	for f in /media/*; do
		is_in_blkid $(strip_diskname $f) || continue
		if [ "$opt_umount" = "1" ]; then
			$0 -u $f
		else
			$0 $f
		fi
	done
	exit
fi

disk=$(strip_diskname $1)
[ -z "$disk" ] && err No disk specified

is_in_blkid $disk || err $disk: Disk not found in blkid

ds_dir="/media/$disk/.dontsleep"
ds_script=dontsleep

if [ "$opt_umount" != "1" ]; then
	is_mounted $disk && {
		msg 0 $disk: Already mounted
		exit 0
	}
	device=$(blkid -L $disk)
	msg 1 device = \"$device\"
	[ -z "$device" ] && err Cannot get device for $disk
	echo "$device" | grep -q ^/dev/ || err $device: Malformed device name
	is_active $disk \
	|| sudo cryptsetup luksOpen \
	$([ -n "$MDISK_KEY_FILE" ] && echo "--key-file $MDISK_KEY_FILE") \
	$device $disk && mount /media/$disk
	is_mounted $disk \
	&& msg 0 $T_BOLD$T_GREEN$disk mounted on /media/$disk$T_RESET \
	|| err $disk: mount failed
	[ -d "$ds_dir" ] && prevent_sleep $disk
else
	[ -d "$ds_dir" ] && kill_prevent $disk
	is_mounted $disk && umount /media/$disk
	[ -d "$ds_dir" ] && prevent_sleep $disk
	is_mounted $disk && err /media/$disk: umount failed
	sudo cryptsetup luksClose $disk
	sync
	is_active $disk && err $disk is still active
	msg 0 $T_BOLD$T_GREEN$disk is unmounted and closed$T_RESET
fi

# vim: set ts=8 sw=8 sts=8 noet fo+=w tw=79 fenc=UTF-8 :
