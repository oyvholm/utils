#!/bin/sh

#==============================================================================
# unichar
# File ID: 23f515ba-5d47-11df-bcb0-90e6ba3022ac
#
# Create a searchable SQLite database of all Unicode characters.
#
# Author: Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#==============================================================================

progname=unichar
VERSION=0.5.0

db="$HOME/.unichar.sqlite"
guipdf="$HOME/bin/Lib/unicode/current/charts/CodeCharts.pdf"
uc_url="ftp://unicode.org/Public/UNIDATA/UnicodeData.txt"
pdfprog=evince

opt_convert=0
opt_get=0
opt_gui=0
opt_help=0
opt_init=''
opt_quiet=0
opt_verbose=0
while test -n "$1"; do
	case "$1" in
	-c|--convert) opt_convert=1; shift ;;
	--get) opt_get=1; shift ;;
	-g|--gui) opt_gui=1; shift ;;
	-h|--help) opt_help=1; shift ;;
	--init) opt_init=$2; shift 2 ;;
	-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
	-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
	--version) echo $progname $VERSION; exit 0 ;;
	--) shift; break ;;
	*)
		if printf '%s\n' "$1" | grep -q ^-; then
			echo "$progname: $1: Unknown option" >&2
			exit 1
		else
			break
		fi
	break ;;
	esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
	test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
	cat <<END

Search for Unicode characters, different arguments are ANDed against 
each other.

Usage:

  $progname --init directory_with_Unicode_files [--get]
    Create the database and optionally download the necessary files from 
    unicode.org .

  $progname search_string [search_string [...]]
    Search through the database after Unicode characters.

  $progname -c
    See description for -c/--convert.

Options:

  -c, --convert
    Read $progname output (search result) from stdin and convert it into 
    proper UTF-8.
  --get
    Used together with --init. Automatically download the necessary 
    files from ftp://unicode.org/Public/UNIDATA/ into directory 
    specified with --init. At the moment only UnicodeData.txt is used.
  -g, --gui
    Display the Unicode character table with $pdfprog(1).
    Location: $guipdf
  -h, --help
    Show this help.
  --init DIRECTORY
    Initialise a new database from UnicodeData.txt in DIRECTORY.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

For example (with Unicode 8.0.0):

  $ $progname latin | wc -l
  1492

  $ $progname latin ring | wc -l
  17

  $ $progname die face
  2680;DIE FACE-1;So;0;ON;;;;;N;;;;;
  2681;DIE FACE-2;So;0;ON;;;;;N;;;;;
  2682;DIE FACE-3;So;0;ON;;;;;N;;;;;
  2683;DIE FACE-4;So;0;ON;;;;;N;;;;;
  2684;DIE FACE-5;So;0;ON;;;;;N;;;;;
  2685;DIE FACE-6;So;0;ON;;;;;N;;;;;

  $ $progname fac angr
  1F620;ANGRY FACE;So;0;ON;;;;;N;;;;;

  $ $progname latin above ring | $progname -c
  ÅåŮůǺǻẘẙ

END
	exit 0
fi

if test -n "$opt_init"; then
    if test -e "$db"; then
        echo $progname: $db: SQLite database already exists >&2
        echo $progname: Please remove it and try again >&2
        exit 1
    fi

    if test "$opt_get" = "1"; then
        mkdir -p "$opt_init"
        cd "$opt_init" || {
            echo $progname: Cannot change directory to \'$opt_init\' >&2
            exit 1
        }
        if wget --version | grep -q "GNU Wget"; then
            wget "$uc_url" || {
                echo $progname: Error during download from $uc_url >&2
                exit 1
            }
        elif curl --version | grep -q '^curl [0-9]'; then
            curl "$uc_url" -o UnicodeData.txt || {
                echo $progname: Error during download from $uc_url >&2
                exit 1
            }
        else
            echo $progname: Unable to find a suitable download program >&2
            echo $progname: \(searched for wget and curl\) >&2
            exit 1
        fi
        cd - >/dev/null
    fi

    if test ! -d "$opt_init/."; then
        echo $progname: $opt_init: Non-existent or unavailable directory >&2
        exit 1
    fi

    ucdata="$opt_init/UnicodeData.txt"

    if test ! -r "$ucdata"; then
        echo $progname: $ucdata not found or is not readable >&2
        exit 1
    fi

    sqlite3 "$db" "CREATE TABLE chars (s varchar);"
    sqlite3 "$db" "CREATE INDEX idx_chars_s ON chars (s);"
    sqlite3 "$db" ".import '$ucdata' chars" && {
        echo $progname: $ucdata successfully imported into $db >&2
        exit 0
    } || {
        echo $progname: Something went wrong during import into $db >&2
        exit 1
    }
fi

if test "$opt_convert" = "1"; then
    # Convert from unichar output to actual UTF-8
    cut -f 1 -d ';' | fromhex -u
    exit 0
fi

if test "$opt_gui" = "1"; then
    $pdfprog "$guipdf" &
    exit 0
fi

if test ! -r "$db"; then
    echo $progname: Database $db not found, >&2
    echo you need to run \'$progname --init\' >&2
    exit 1
fi

unset and_str search_str
for f in "$@"; do
    search_str="$search_str$and_str s LIKE '%$f%'"
    and_str=" AND"
done
test -z "$search_str" && {
    echo $progname: No search string specified >&2
    exit 1
}
sqlite3 "$db" "SELECT * FROM chars WHERE $search_str"

# vim: set ts=8 sw=8 sts=8 noet fo+=w tw=79 fenc=UTF-8 :
