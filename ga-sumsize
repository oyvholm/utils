#!/usr/bin/env perl

#=======================================================================
# ga-sumsize
# File ID: dc4436de-5619-11e5-9330-000df06acc56
#
# Read git-annex keys from stdin or files and output total size.
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;
use Number::Bytes::Human qw(format_bytes);

local $| = 1;

our %Opt = (

    'display' => 0,
    'help' => 0,
    'quiet' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'display|d' => \$Opt{'display'},
    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main());

sub main {
    # {{{
    my $Retval = 0;
    my $total_size = 0;

    while (<>) {
        $total_size += file_size($_);
        $Opt{'display'} && print("$total_size ");
        print;
    }

    printf("\n%s: Total size of keys: %u (%s)\n",
        $progname,
        $total_size,
        format_bytes($total_size),
    );

    return($Retval);
    # }}}
} # main()

sub file_size {
    # Read file size from git-annex key {{{
    my $key = shift;
    my $retval = 0;
    if ($key =~ /[A-Z0-9_]+-s(\d+)-/) {
        $retval = $1;
    }
    return($retval)
    # }}}
} # file_size()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Read git-annex keys from stdin or files and output total size.

For example:

  git-annex unused >unused.txt
  $progname unused.txt

Usage: $progname [options] [file [files [...]]]

Options:

  -d, --display
    Prefix each line with the current count.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
