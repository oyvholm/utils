#!/usr/bin/env perl

#=======================================================================
# std
# File ID: e9801250-f743-11dd-afdc-000475e441b9
#
# Send file templates to stdout
#
# Character set: UTF-8
# ©opyleft 2004– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;
use Cwd;

local $| = 1;

our %Opt = (

    'force' => 0,
    'help' => 0,
    'notag' => "",
    'quiet' => 0,
    'rcfile' => "$ENV{'HOME'}/.stdrc",
    'tag' => 0,
    'verbose' => 0,
    'version' => 0,

);
my @Tags = ();

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.9.0';

my $CMD_GIT = "git";
my $CMD_WGET = "wget";
my $CMD_SUUID = "suuid";

my $Type = "";
my $Dest = "";
my $session_uuid = "";
my @bck_cmdline = @ARGV;

Getopt::Long::Configure('bundling');
GetOptions(

    'force|f' => \$Opt{'force'},
    'help|h' => \$Opt{'help'},
    'notag|T=s' => \$Opt{'notag'},
    'quiet|q+' => \$Opt{'quiet'},
    'rcfile=s' => \$Opt{'rcfile'},
    'tag|t=s' => \@Tags,
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my $Lh = "[0-9a-fA-F]";
my $v1_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\{12}";

my %rc = read_rcfile();

if (defined($ARGV[0])) {
    $Type = $ARGV[0];
} else {
    usage(1);
}

defined($ARGV[1]) && ($Dest = $ARGV[1]);

my ($Sec, $Min, $Hour, $Day, $Mon, $Year, $Wday, $Yday, $is_dst) = localtime();
$Year += 1900;
$Mon += 1;

my %Tag = ();
if (scalar(@Tags)) {
    for my $Curr (@Tags) {
        if ($Curr =~ /^([^=]+?)=(.*)$/) {
            $Tag{$1} = $2;
        } else {
            die("$progname: $Curr: Invalid tag, must have the form " .
                "name=value\n");
        }
    }
}

my $retval = main();
exit($retval);

sub main {
    # {{{
    my $Retval = 0;

    if (length($Dest) && -e $Dest) {
        if ($Opt{'force'}) {
            msg(1, "Overwriting '$Dest'...");
        } else {
            warn("$progname: $Dest: File already exists, " .
                 "will not overwrite\n");
            return(1);
        }
    }

    msg(2, sprintf("\@Tags = \"%s", join("\", \"", @Tags) . "\""));
    msg(2, sprintf("%%Tag = \"%s", join("\", \"", %Tag) . "\""));

    my $dat_dir = $0;
    $dat_dir =~ s/^(.+\/)(.+?)$/$1/;
    $dat_dir .= "Lib/std";
    my $dat_file = "$dat_dir/$Type";

    my $tmpfile = "tmp.std." . time;

    my $orig_dir = getcwd();
    chdir($dat_dir) || die("$progname: $dat_dir: Cannot chdir: $!\n");
    if (open(PipeFP, "$CMD_GIT status $Type |")) {
        while (<PipeFP>) {
            if (/modified:\s+$dat_file/) {
                warn("$progname: WARNING: $dat_file is modified\n");
                last;
            }
        }
        close(PipeFP);
        chdir($orig_dir) ||
            die("$progname: $orig_dir: Cannot return to original dir: $!\n");
        mysyst("cp", "-p", $dat_file, $tmpfile);
    } else {
        warn("$progname: Unable to open \"$CMD_GIT stat\" pipe\n");
    }

    if (length($Dest)) {
        msg(1, "Copying temp file");
        mysyst("cp", "-p", $tmpfile, $Dest);
    }

    my $Output = "";

    if (open(FromFP, "<$tmpfile")) {
        while (my $Line = <FromFP>) {
            $Line = replace_tags($Line);
            $Output .= $Line;
        }
        close(FromFP);
        if ($Output =~ /STD\S+DTS/s) {
            my ($tmp, $tmp2) = ($Output, "");
            my %Ha = ();
            $tmp =~ s/STDU(\S+?)UDTS/uc($Ha{$1} = 1)/gse;
            $tmp =~ s/STD(\S+?)DTS/($Ha{$1} = 1)/gse;
            for my $key (sort keys %Ha) {
                defined($Ha{$key}) && ($tmp2 .= "$key ");
            }
            $tmp2 =~ s/ $//;
            warn("$progname: Warning: Undefined tags: $tmp2\n");
        }
    } else {
        die("$progname: $tmpfile: Cannot read file: $!\n");
    }

    if (length($Dest)) {
        open(DestFP, ">$Dest")
            || die("$progname: $Dest: Cannot open file for write: $!\n");
        print(DestFP $Output);
        close(DestFP);
    } else {
        print($Output);
    }

    unlink($tmpfile) || warn("$progname: $tmpfile: Cannot delete file: $!\n");

    return $Retval;
    # }}}
} # main()

sub read_rcfile {
    # Read userdefined data from file in $Opt{'rcfile'} {{{
    my %Retval = ();
    if (-e $Opt{'rcfile'}) {
        if (open(RcFP, "<", $Opt{'rcfile'})) {
            while (my $Line = <RcFP>) {
                $Line =~ s/^\s*(.*?)\s*$/$1/;
                # if ($Line =~ /^example\s*=\s*(\S+)/) {
                #     $Retval{'example'} = $1;
                # }
            }
            close(RcFP);
        } else {
            msg(-1, "$Opt{'rcfile'}: Cannot open file for read: $!");
        }
    }
    return(%Retval);
    # }}}
} # read_rcfile()

sub replace_tags {
    # {{{
    my $Txt = shift;
    if (scalar(@Tags)) {
        for my $Curr (keys %Tag) {
            if ($Opt{'notag'} !~ /\b$Curr\b/) {
                $Txt =~ s/STDU${Curr}UDTS/\U$Tag{$Curr}/g;
                $Txt =~ s/STD${Curr}DTS/$Tag{$Curr}/g;
            }
        }
    }
    $Opt{'notag'} =~ /\bfilename\b/ || (length($Dest) &&
        ($Txt =~ s/STDfilenameDTS/$Dest/g));
    $Opt{'notag'} =~ /\byear\b/ || ($Txt =~ s/STDyearDTS/$Year/g);
    $Opt{'notag'} =~ /\buuid\b/ || ($Txt =~ s/STDuuidDTS/gen_uuid()/ge);
    return($Txt);
    # }}}
} # replace_tags()

sub mysyst {
    # Customised system() {{{
    my @Args = @_;
    my $system_txt = sprintf("system(\"%s\");", join("\", \"", @Args));
    msg(2, "$system_txt");
    msg(1, "@_\n");
    system(@_);
    # }}}
} # mysyst()

sub gen_uuid {
    # {{{
    my $Retval = "";
    my $Comment = "$progname " . join(" ", @bck_cmdline) . "";
    if (!length($session_uuid)) {
        chomp($session_uuid =
            `$CMD_SUUID --tag std --whereto o --comment "$Comment"`);
        if (!defined($session_uuid) || $session_uuid !~ /^$v1_templ$/) {
            die("$progname: $CMD_SUUID error\n");
        }
        if (length($Dest)) {
            print("$session_uuid\n");
        }
    }
    $Retval = $session_uuid;
    msg(2, "gen_uuid(): Retval = '$Retval'");
    return($Retval);
    # }}}
} # gen_uuid()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options] type [destfile]

Create a file of a specific type using a predefined template. If no 
destination file is specified, output goes to stdout.

Options:

  -h, --help
    Show this help.
  -f, --force
    Overwrite existing file.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  --rcfile FILE
    Read initial settings from FILE instead of '\$HOME/.stdrc'.
  -t x, --tag x
    Replaces strings of the form "STDtagDTS" or "STDUtagUDTS" in the 
    template file with another string. The "STDUtagUDTS" version 
    converts the tag to upper case. Examples:
      -t testcmd=myscript.pl
      -t year=1997 -t "personname=John Lennon" -t os=GNU/Linux
    The option can be specified many times.
  -T x, --notag x
    Comma-separated list of tags not to expand. Examples:
      -T year,uuid
        Will not expand the year and uuid tags.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

Initial settings can be stored in '~/.stdrc'. The format is:

key = value

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
