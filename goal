#!/usr/bin/env perl

#=======================================================================
# goal
# File ID: efffd138-8a3f-11e5-8010-7927c6c13cb1
#
# Print timestamp when a specific goal will be reached.
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;
use Time::HiRes qw{ gettimeofday };
use Time::Local;

local $| = 1;

our %Opt = (

    'current-time' => '',
    'help' => 0,
    'quiet' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.3.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'current-time|c=s' => \$Opt{'current-time'},
    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main());

sub main {
    # {{{
    my $Retval = 0;
    if (!defined($ARGV[3])) {
        warn("$progname: Missing arguments\n");
        return(1);
    }
    my ($begintime, $beginval, $endval, $currval) = @ARGV;
    my $begin_ep;

    if ($begintime =~ /^(\d{4})-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d(\.\d+)?)$/) {
        $begin_ep = timegm($6, $5, $4, $3, $2-1, $1);
    } else {
        warn("$progname: Invalid date format, " .
             "must be \"YYYY-MM-DD HH:MM:SS[.sssss]\"\n");
        return(1);
    }
    msg(2, "begin_ep = '$begin_ep'");
    my $now;
    if (length($Opt{'current-time'})) {
        if ($Opt{'current-time'} =~
            /^(\d{4})-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d(\.\d+)?)$/
        ) {
            $now = timegm($6, $5, $4, $3, $2-1, $1);
        } else {
            warn("$progname: Invalid date format in -c/--current-time\n");
            return(1);
        }
    } else {
        $now = gettimeofday();
    }
    if ($beginval == $currval) {
        warn("$progname: Current value must be different from start value\n");
        return(1);
    }
    my $end_ep = goal_x($endval, $begin_ep, $beginval, $now, $currval);
    msg(2, "end_ep = '$end_ep'");
    printf("%s %s\n",
        sec_to_interval($end_ep - $now),
        sec_to_string($end_ep),
    );

    return($Retval);
    # }}}
} # main()

sub goal_x {
    # Return x when y, x0, y0, x1 and y1 are known {{{
    my ($y, # Goal to find timestamp for
        $x0, # Start x
        $y0, # Start y
        $x1, # Current x
        $y1, # Current y
    ) = @_;
    if ($y0 == $y1) {
        # Avoid division by zero
        return("NaN");
    }
    my $x = $x0 + ($y - $y0) / ($y1 - $y0) * ($x1 - $x0);
    return($x);
    # }}}
} # goal_x()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub sec_to_interval {
    # {{{
    my $origsecs = shift;
    my $secs = 1.0 * abs($origsecs);
    my $rem = 1.0 * $secs;
    my $frac = sprintf("%.6f", 1.0 * $rem - int($rem));
    if ($frac == 0) {
        $frac = "";
    } elsif ($frac =~ /^1/) {
        $frac = "";
        $rem = int($rem) + 1;
    } else {
        $frac =~ s/0+$//;
        $frac =~ s/^0//;
    }
    my $days = 1.0 * int($rem / 86400.0);
    $rem -= 1.0 * $days * 86400.0;
    my $hours = 1.0 * int($rem / 3600.0);
    $rem -= 1.0 * ($hours * 3600.0);
    my $minutes = 1.0 * int($rem / 60.0);
    $rem -= 1.0 * ($minutes * 60.0);
    my $seconds = 1.0 * $rem;
    my $retval = sprintf("%s%ud:%02u:%02u:%02u%s",
        $origsecs < 0 ? "-" : "",
        $days, $hours, $minutes, $seconds, $frac);
    return($retval);
    # }}}
} # sec_to_interval()

sub sec_to_string {
    # Convert seconds since 1970 to "yyyy-mm-dd hh:mm:ss[.frac]Z" {{{
    my ($Seconds, $Sep) = @_;
    length($Seconds) || return('');
    ($Seconds =~ /^-?(\d*)(\.\d+)?$/) || return(undef);
    my $Secfrac = ($Seconds =~ /^([\-\d]*)(\.\d+)$/) ? 1.0*$2 : "";
    $Secfrac =~ s/^0//;

    defined($Sep) || ($Sep = " ");
    my @TA = gmtime($Seconds);
    my($DateString) = sprintf("%04u-%02u-%02u %02u:%02u:%02u%sZ",
                              $TA[5]+1900, $TA[4]+1, $TA[3],
                              $TA[2], $TA[1], $TA[0], $Secfrac);
    return($DateString);
    # }}}
} # sec_to_string()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Print timestamp when a specific goal will be reached.

Usage: $progname [options] begin_date begin_val end_val current_val

All timestamps use UTC, and the date format must be specified as 
"YYYY-MM-DD HH:MM:SS[.sssss]".

Options:

  -c DATE, --current-time DATE
    Use DATE as current time.
  -h, --help
    Show this help.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
