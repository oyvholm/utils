#!/usr/bin/env bash

#=======================================================================
# git-wn
# File ID: 149ce758-8aca-11e0-afed-37ea9f2067e0
#
# "git what's new", show descendants of a specific commit
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=git-wn
VERSION=0.3.0

ARGS="$(getopt -o "\
h\
p\
q\
v\
w\
" -l "\
help,\
patch,\
quiet,\
verbose,\
word-diff,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_patch=0
opt_quiet=0
opt_verbose=0
opt_word_diff=0
while :; do
    case "$1" in
        -h|--help) opt_help=1; shift ;;
        -p|--patch) opt_patch=1; shift ;;
        -q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
        -v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
        -w|--word-diff) opt_word_diff=1; shift ;;
        --version) echo $progname $VERSION; exit 0 ;;
        --) shift; break ;;
        *) echo $progname: Internal error >&2; exit 1 ;;
    esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

if test "$opt_help" = "1"; then
    test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
    cat <<END

"git what's new", show descendants of a specific commit. For example, 
after "git fetch", list all new commits.

Usage: $progname [options] [commit] [git_log_args]

Options:

  -h, --help
    Show this help.
  -p, --patch
    Use extended format with patch.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  -w, --word-diff
    Same as -p, but use word diff instead
  --version
    Print version information.

If commit is not specified, use HEAD. To use git_log_args, a 
commit/branch/tag/whatever has to be specified as \$1.

END
    exit 0
fi

unset word_diff_str
test "$opt_word_diff" = "1" && { opt_patch=1; word_diff_str="--word-diff"; }

unset branches
from="$1"
shift
test -z "$from" && from=HEAD
git log -1 $from &>/dev/null || { echo $from: Invalid ref >&2; exit 1; }
log_args="$@"

for f in $(git lc $from); do
    branches="$branches $from..$f"
done

if test "$opt_patch" = "1"; then
    git log --date-order --date=iso --decorate=short --format=fuller --graph \
      $word_diff_str -c -p $log_args $branches
else
    git log --abbrev-commit --date-order --decorate=short --graph \
      --pretty=format:'%Cred%h %Cblue%p%Creset -%Creset %s %Cgreen(%cd %Cblue%an%Cgreen)%Creset%C(yellow)%d%Creset' \
      $log_args $branches
fi
