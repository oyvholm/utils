#!/usr/bin/env perl

#=======================================================================
# git-dbr
# File ID: fd27c966-f4ed-11e4-bb56-000df06acc56
#
# Delete local and remote branches from local and remote Git 
# repositories.
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'dry-run' => 0,
    'help' => 0,
    'quiet' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.2.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'dry-run|n' => \$Opt{'dry-run'},
    'help|h' => \$Opt{'help'},
    'quiet|q+' => \$Opt{'quiet'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my @remotes = split("\n", `git remote`);
my @local_branches = format_array(split("\n", `git branch`));
my @remote_branches = format_array(split("\n", `git branch -r`));

exit(main());

sub main {
    # {{{
    my $Retval = 0;

    for my $arg (@ARGV) {
        # Check if it's a local branch
        if (!delete_branch($arg)) {
            # No, try to strip trailing comma
            my $exp = $arg;
            $exp =~ s/,$//;
            if (!delete_branch($exp)) {
                # Try to remove "remotes/" prefix
                $exp = $arg;
                $exp =~ s/^remotes\///;
                if (!delete_branch($exp)) {
                    msg(0, "$arg: Could not delete branch");
                }
            }
        }
    }
    return($Retval);
    # }}}
} # main()

sub delete_branch {
    # Delete local or remote branch. Return 1 if ok, 0 if branch not found {{{
    my $arg = shift;
    my $retval = 0;
    if (grep(/^$arg$/, @local_branches)) {
        # $arg is a local branch
        mysystem("git", "branch", "-D", $arg);
        $retval = 1;
    } elsif (grep(/^$arg$/, @remote_branches)) {
        # $arg is a remote branch
        if ($arg =~ /^(\S+?)\/(\S+)/) {
            my ($remote, $branch) = ($1, $2);
            if (grep(/^$remote$/, @remotes)) {
                # Text before first slash is a remote name
                mysystem("git", "push", $remote, ":$branch");
                $retval = 1;
            }
        }
    }
    return($retval);
    # }}}
} # delete_branch()

sub format_array {
    # Strip initial two characters from array elements {{{
    my @initial = @_;
    my @retval = ();
    for my $loop (@initial) {
        my $curr = $loop;
        $curr =~ s/^..(.+)$/$1/;
        push(@retval, $curr);
    }
    return(sort @retval);
    # }}}
} # format_array()

sub check_sig {
    # {{{
    my $retval = shift;
    ($retval & 127) &&
        die("\n$progname: Child process interrupted, aborting.\n");
    return(0);
    # }}}
} # check_sig()

sub mysystem {
    # {{{
    my @cmd = @_;
    msg(0, sprintf("%s '", $Opt{'dry-run'} ? "Simulating" : "Executing") .
        join(" ", @cmd) . "'...");
    $? = 0;
    !$Opt{'dry-run'} && system(@cmd) && check_sig($?);
    return $?;
    # }}}
} # mysystem()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Delete local and remote branches from local and remote Git repositories. 
Also removes trailing comma to make it easier to copy+paste from %d 
output used with "git log --format".

Usage: $progname [options] [remote/]branch[,] [[remote/]branch[,] [...]]

Options:

  -h, --help
    Show this help.
  -n, --dry-run
    Simulate what would happen, don't actually do anything.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

Examples:

  git dbr gitlab/oldbranch oldbranch
    Delete oldbranch from the gitlab remote and also delete it if it 
    exists locally.
  git dbr gitlab/oldbranch, oldbranch,
    Same as above. This is copy+paste from the %d output created by "git 
    log --format". The comma is removed internally before the branches 
    are deleted.
  git branch -a | grep oldbranch | xargs git dbr
  git dbr \$(git branch -a | grep oldbranch)
    These two examples works identically, it's just a matter of 
    preference how to write it. Delete all branches locally and from all 
    known remotes where the string "oldbranch" occurs.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-q>, B<--quiet>

Be more quiet. Can be repeated to increase silence.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
