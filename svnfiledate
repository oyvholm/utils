#!/usr/bin/env perl

#=======================================================================
# svnfiledate
# File ID: 2530c5b0-f744-11dd-a6f8-000475e441b9
# Stores the file date in a special svn property.
#
# Character set: UTF-8
# ©opyleft 2006– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (

    'debug' => 0,
    'directories' => 0,
    'help' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

Getopt::Long::Configure("bundling");
GetOptions(

    "debug" => \$Opt{'debug'},
    "directories|d" => \$Opt{'directories'},
    "help|h" => \$Opt{'help'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

my $PROP_NAME = "filedate";
my $CMD_SVN = "svn";

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

for my $File (@ARGV) {
    # {{{
    my @stat_array = lstat($File);
    if (scalar(@stat_array)) {
        if (-d $File && !$Opt{'directories'}) {
            warn("$progname: $File: Ignoring directory\n");
        } else {
            my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, 
                $atime, $mtime, $ctime, $blksize, $blocks) = @stat_array;
            my @TA = gmtime($mtime);
            my $date_str = sprintf("%04u-%02u-%02uT%02u:%02u:%02uZ",
                $TA[5]+1900, $TA[4]+1, $TA[3], $TA[2], $TA[1], $TA[0]);
            mysyst($CMD_SVN, "propset", $PROP_NAME, $date_str, $File);
        }
    } else {
        warn("$progname: $File: Unable to lstat() file\n");
    }
    # }}}
}

sub mysyst {
    # {{{
    my @Args = @_;
    my $system_txt = sprintf("system(\"%s\");", join("\", \"", @Args));
    D("$system_txt");
    deb_wait();
    print("@_\n");
    system(@_);
    # }}}
} # mysyst()

sub deb_wait {
    # {{{
    $Debug || return;
    print("debug: Press ENTER...");
    <STDIN>;
    # }}}
} # deb_wait()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Define a "$PROP_NAME" property containing the timestamp of a 
file/symlink/directory on Subversion-controlled files.

Usage: $progname [options] [file [files [...]]]

Options:

  -d, --directories
    Also set the property on directories, default action is to ignore 
    those.
  -h, --help
    Show this help.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME

svnfiledate

=head1 SYNOPSIS

svnfiledate [options] [file [files [...]]]

=head1 DESCRIPTION

Define a "$PROP_NAME" property containing the timestamp of a 
file/symlink/directory on Subversion-controlled files.

=head1 OPTIONS

=over 4

=item B<-d>, B<--directories>

Also set the property on directories, default action is to ignore those.

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS

It’s non-standard. The Subversion client doesn’t have anything like this 
yet, so it will probably change in the future.

=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
