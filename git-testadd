#!/bin/bash

#=======================================================================
# git-testadd
# File ID: ae2451d2-43a1-11e6-86fa-175746503fe8
#
# Execute a command with only the staged changes in Git applied.
#
# Author: Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=git-testadd
VERSION=0.5.0

ARGS="$(getopt -o "\
h\
p\
q\
u\
v\
" -l "\
help,\
pristine,\
quiet,\
unmodified,\
verbose,\
version,\
" -n "$progname" -- "$@")"
test "$?" = "0" || exit 1
eval set -- "$ARGS"

opt_help=0
opt_pristine=0
opt_quiet=0
opt_unmodified=0
opt_verbose=0
while :; do
	case "$1" in
		(-h|--help) opt_help=1; shift ;;
		(-p|--pristine) opt_pristine=1; shift ;;
		(-q|--quiet) opt_quiet=$(($opt_quiet + 1)); shift ;;
		(-u|--unmodified) opt_unmodified=1; shift ;;
		(-v|--verbose) opt_verbose=$(($opt_verbose + 1)); shift ;;
		(--version) echo $progname $VERSION; exit 0 ;;
		(--) shift; break ;;
		(*) echo $progname: Internal error >&2; exit 1 ;;
	esac
done
opt_verbose=$(($opt_verbose - $opt_quiet))

tmpdir=".testadd.tmp"

if test "$opt_help" = "1"; then
	test $opt_verbose -gt 0 && { echo; echo $progname $VERSION; }
	cat <<END

Execute a command with only the staged changes in Git applied.

Usage: $progname [options] [--] COMMAND

If you have lots of unrelated uncommitted changes in the current 
repository and want to split up the commit, how can you easily check if 
the changes passes the test suite? With all the other unrelated changes 
it can be hard to make sure that only relevant changes becomes part of 
the commit, and that they don't result in regressions. This script 
clones the repository to the directory "$tmpdir" in the current 
directory and applies the staged chenges there (unless -u/--unmodified 
or -p/--pristine is specified), chdirs to the same relative directory in 
the clone and executes the command specified on the command line there.

If COMMAND contains any options starting with '-', add "--" in front of 
the command so they won't be parsed by $progname, or surround it with 
quotes.

Examples:

  user@host:~/src/myproject/src/t \$ $progname make test

    The command will be executed in ~/src/myproject/src/t/$tmpdir/ with 
    only the staged changes applied.

  user@host:~/src/myproject/src/t \$ $progname -- ./run-tests -v

    This command contains a "-v" option. Disable option parsing of the 
    command by prefixing it with "--".

  $ $progname "make && cd t && make 2>&1 | less || echo fail"

    With quotes, even control operators and pipes can be used.

Options:

  -h, --help
    Show this help.
  -p, --pristine
    Don't apply the staged changes, run the command with a clean HEAD.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -u, --unmodified
    Don't remove $tmpdir/, clone the repo and apply the patch, only 
    chdir to $tmpdir/ and run the command there as it was left from the 
    previous run. For example:
      $ $progname make         # This takes a long time, won't repeat
      $ $progname -u make test # Run the tests in a finished build
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
	exit 0
fi

if test -z "$1"; then
	echo $progname: No command specified >&2
	exit 1
fi

topdir="$(git rev-parse --show-toplevel)"
subdir="$(git rev-parse --show-prefix)"

if test -z "$topdir"; then
	echo $progname: Could not get root dir of repo >&2
	exit 1
fi

if test "$opt_unmodified" = "1"; then
	if test ! -d "$tmpdir"; then
		echo $progname: $tmpdir not found, -u/--unmodified needs it >&2
		exit 1
	fi
else
	rm -rf "$tmpdir"
	git clone "$topdir" "$tmpdir"

	if test "$opt_pristine" = "1"; then
		:
	elif git diff --cached --binary | grep -q .; then
		git diff --cached --binary | (cd "$tmpdir" && git apply)
	elif test $opt_verbose -ge 0; then
		echo $progname: No staged changes, running command with clean HEAD >&2
	fi
fi

newdir="$tmpdir/$subdir"
cd "$newdir" || {
	echo "$progname: $newdir: Cannot chdir" >&2
	exit 1
}

echo >&2
test $opt_verbose -ge 1 && echo "$progname: Executing \"$*\" in $(pwd)" >&2
eval "$@"
